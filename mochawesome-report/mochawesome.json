{
  "stats": {
    "suites": 24,
    "tests": 40,
    "passes": 40,
    "pending": 0,
    "failures": 0,
    "start": "2025-01-20T03:41:29.027Z",
    "end": "2025-01-20T03:41:29.082Z",
    "duration": 55,
    "testsRegistered": 40,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "4de9f3b4-8e5c-4823-8826-364247e5265c",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
          "title": "Testes para a função de login",
          "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\authentication-handlers.test.js",
          "file": "\\test\\authentication-handlers.test.js",
          "beforeHooks": [
            {
              "title": "\"before all\" hook in \"Testes para a função de login\"",
              "fullTitle": "Testes para a função de login \"before all\" hook in \"Testes para a função de login\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.stub(mysql, \"createConnection\").returns({\n  connect: sinon.stub(),\n  query: sinon.stub(),\n});",
              "err": {},
              "uuid": "3007331b-81c2-4aef-8341-00b4d407f530",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"before each\" hook in \"Testes para a função de login\"",
              "fullTitle": "Testes para a função de login \"before each\" hook in \"Testes para a função de login\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection = mysql.createConnection();\nmockRequest = {\n  body: {\n    login: \"usuario_teste\",\n    senha: \"senha_teste\",\n  },\n  session: {},\n};\nmockResponse = {\n  sendStatus: sinon.spy(),\n  send: sinon.spy(),\n};",
              "err": {},
              "uuid": "1421f431-a7ce-4208-92d2-eee3201274ea",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after all\" hook in \"Testes para a função de login\"",
              "fullTitle": "Testes para a função de login \"after all\" hook in \"Testes para a função de login\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0be85999-13ce-419b-8cd6-b87dfb032003",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": true,
              "skipped": false
            },
            {
              "title": "\"after each\" hook in \"Testes para a função de login\"",
              "fullTitle": "Testes para a função de login \"after each\" hook in \"Testes para a função de login\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.resetHistory();",
              "err": {},
              "uuid": "38a62bd6-8456-4547-88e5-6b57cb21f415",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "deve retornar status 500 quando ocorre um erro na conexão com o banco de dados",
              "fullTitle": "Testes para a função de login deve retornar status 500 quando ocorre um erro na conexão com o banco de dados",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection.connect.callsArgWith(0, new Error(\"Falha na conexão\"));\nauthenticationHandlers.login(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;",
              "err": {},
              "uuid": "c154298f-8a32-4335-a998-52861bb5baa6",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve retornar status 401 quando as credenciais são inválidas",
              "fullTitle": "Testes para a função de login deve retornar status 401 quando as credenciais são inválidas",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection.connect.callsArgWith(0, null);\nmockConnection.query.callsArgWith(2, null, []);\nauthenticationHandlers.login(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(401)).to.be.true;",
              "err": {},
              "uuid": "37a58aae-47ad-45d1-9780-692a4e781e79",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "deve autenticar o usuário corretamente e definir a sessão quando as credenciais são válidas",
              "fullTitle": "Testes para a função de login deve autenticar o usuário corretamente e definir a sessão quando as credenciais são válidas",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const usuarioMock = {\n  id: 1,\n  userName: \"usuario_teste\",\n  name: \"Usuário Teste\",\n  email: \"teste@exemplo.com\",\n  roleCode: \"ADMIN\",\n  roleDescription: \"Administrador\",\n};\nmockConnection.connect.callsArgWith(0, null);\nmockConnection.query.callsArgWith(2, null, [usuarioMock]);\nauthenticationHandlers.login(mockRequest, mockResponse);\nexpect(mockRequest.session.User).to.deep.equal(usuarioMock);\nexpect(mockResponse.send.calledWith(JSON.stringify(usuarioMock))).to.be\n  .true;",
              "err": {},
              "uuid": "f5475293-20bd-4fcf-bc3e-4e45ac7de086",
              "parentUUID": "ebc81eaf-1fb4-4df6-ae96-f735551b99f4",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "c154298f-8a32-4335-a998-52861bb5baa6",
            "37a58aae-47ad-45d1-9780-692a4e781e79",
            "f5475293-20bd-4fcf-bc3e-4e45ac7de086"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "e22e6f22-2870-4ab8-83c3-22805f07b940",
          "title": "Testes para Clients Handlers",
          "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\clients-handlers.test.js",
          "file": "\\test\\clients-handlers.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes para Clients Handlers\"",
              "fullTitle": "Testes para Clients Handlers \"before each\" hook in \"Testes para Clients Handlers\"",
              "timedOut": false,
              "duration": 1,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection = sinon.stub(mysql, \"createConnection\").returns({\n  connect: sinon.stub(),\n  query: sinon.stub(),\n});\nmockRequest = {\n  body: {},\n  params: {},\n};\nmockResponse = {\n  json: sinon.spy(),\n  sendStatus: sinon.spy(),\n};\nmockConsole = {\n  error: sinon.stub(console, \"error\"),\n  log: sinon.stub(console, \"log\"),\n};",
              "err": {},
              "uuid": "7be4084c-0271-40f8-a230-54286a1a56ea",
              "parentUUID": "e22e6f22-2870-4ab8-83c3-22805f07b940",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testes para Clients Handlers\"",
              "fullTitle": "Testes para Clients Handlers \"after each\" hook in \"Testes para Clients Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "fa6ec289-8da2-4099-bcfc-9d0f351d5cb3",
              "parentUUID": "e22e6f22-2870-4ab8-83c3-22805f07b940",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "fd32261d-3cb5-481d-8881-aac632bae3cc",
              "title": "getClients",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\clients-handlers.test.js",
              "file": "\\test\\clients-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma lista de clientes",
                  "fullTitle": "Testes para Clients Handlers getClients deve retornar uma lista de clientes",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const clientsMock = [\n  {\n    id: 1,\n    name: \"Client 1\",\n    address: \"Address 1\",\n    postCode: \"12345\",\n    email: \"client1@example.com\",\n    nif: \"123456789\",\n    TOTAL_JOBS: 2,\n    TOTAL_JOBS_FINALISED: 1,\n  },\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(null, clientsMock);\n  }),\n});\nclientsHandlers.getClients(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ clients: clientsMock })).to.be.true;",
                  "err": {},
                  "uuid": "c633ca67-84ca-4831-9510-09959195c481",
                  "parentUUID": "fd32261d-3cb5-481d-8881-aac632bae3cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Clients Handlers getClients deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\nclientsHandlers.getClients(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ clients: [] })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "539436e5-219f-4be4-8b5e-e2aef98f2b1b",
                  "parentUUID": "fd32261d-3cb5-481d-8881-aac632bae3cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c633ca67-84ca-4831-9510-09959195c481",
                "539436e5-219f-4be4-8b5e-e2aef98f2b1b"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "c3418aa5-059d-4d9b-9069-abe0d83bd8cc",
              "title": "editClient",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\clients-handlers.test.js",
              "file": "\\test\\clients-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve atualizar um cliente com sucesso",
                  "fullTitle": "Testes para Clients Handlers editClient deve atualizar um cliente com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n  name: \"Updated Client\",\n  address: \"Updated Address\",\n  postCode: \"54321\",\n  email: \"updated@example.com\",\n  nif: \"987654321\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\nclientsHandlers.editClient(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ success: true })).to.be.true;",
                  "err": {},
                  "uuid": "1caea93f-17a2-46d9-bfda-1a1ca9170bcb",
                  "parentUUID": "c3418aa5-059d-4d9b-9069-abe0d83bd8cc",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao atualizar um cliente",
                  "fullTitle": "Testes para Clients Handlers editClient deve retornar erro ao atualizar um cliente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n  name: \"Updated Client\",\n  address: \"Updated Address\",\n  postCode: \"54321\",\n  email: \"updated@example.com\",\n  nif: \"987654321\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de atualização\"), null);\n  }),\n});\nclientsHandlers.editClient(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ success: false })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "4faf1402-ab7d-4189-9603-6ca5541a6492",
                  "parentUUID": "c3418aa5-059d-4d9b-9069-abe0d83bd8cc",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1caea93f-17a2-46d9-bfda-1a1ca9170bcb",
                "4faf1402-ab7d-4189-9603-6ca5541a6492"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1baa2d60-087a-4a2d-a96d-461cc8dc37ae",
              "title": "deleteClient",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\clients-handlers.test.js",
              "file": "\\test\\clients-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve deletar um cliente com sucesso",
                  "fullTitle": "Testes para Clients Handlers deleteClient deve deletar um cliente com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.params = { id: 1 };\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\nclientsHandlers.deleteClient(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "1cdaa462-5e6c-456b-9f37-46b494efc970",
                  "parentUUID": "1baa2d60-087a-4a2d-a96d-461cc8dc37ae",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao deletar um cliente",
                  "fullTitle": "Testes para Clients Handlers deleteClient deve retornar erro ao deletar um cliente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.params = { id: 1 };\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de exclusão\"), null);\n  }),\n});\nclientsHandlers.deleteClient(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "eecc22f0-f5a5-4e57-83da-bd388992751f",
                  "parentUUID": "1baa2d60-087a-4a2d-a96d-461cc8dc37ae",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1cdaa462-5e6c-456b-9f37-46b494efc970",
                "eecc22f0-f5a5-4e57-83da-bd388992751f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "2c945db8-9a38-4350-83ec-a1a3edc63a31",
              "title": "createClient",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\clients-handlers.test.js",
              "file": "\\test\\clients-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve criar um cliente com sucesso",
                  "fullTitle": "Testes para Clients Handlers createClient deve criar um cliente com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  name: \"New Client\",\n  address: \"New Address\",\n  postCode: \"12345\",\n  email: \"new@example.com\",\n  nif: \"123456789\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\nclientsHandlers.createClient(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "3bbfa0b3-0616-480d-ba88-045db2765186",
                  "parentUUID": "2c945db8-9a38-4350-83ec-a1a3edc63a31",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao criar um cliente",
                  "fullTitle": "Testes para Clients Handlers createClient deve retornar erro ao criar um cliente",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  name: \"New Client\",\n  address: \"New Address\",\n  postCode: \"12345\",\n  email: \"new@example.com\",\n  nif: \"123456789\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de criação\"), null);\n  }),\n});\nclientsHandlers.createClient(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "d0a67997-6b2a-4899-897c-e66248c763c7",
                  "parentUUID": "2c945db8-9a38-4350-83ec-a1a3edc63a31",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "3bbfa0b3-0616-480d-ba88-045db2765186",
                "d0a67997-6b2a-4899-897c-e66248c763c7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "a8d8b3a3-2501-4e7b-a038-16042201073d",
          "title": "Testes para a função logout",
          "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\globalHandlers.test.js",
          "file": "\\test\\globalHandlers.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes para a função logout\"",
              "fullTitle": "Testes para a função logout \"before each\" hook in \"Testes para a função logout\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockRequest = {\n  session: {\n    User: { id: 1, name: \"John Doe\" },\n  },\n};\nmockResponse = {\n  sendStatus: sinon.spy(),\n};",
              "err": {},
              "uuid": "d30fe7ab-975b-435a-b38e-23b99b0d561f",
              "parentUUID": "a8d8b3a3-2501-4e7b-a038-16042201073d",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [],
          "tests": [
            {
              "title": "deve remover o usuário da sessão e retornar status 200",
              "fullTitle": "Testes para a função logout deve remover o usuário da sessão e retornar status 200",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "globalHandlers.logout(mockRequest, mockResponse);\nexpect(mockRequest.session.User).to.be.undefined;\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
              "err": {},
              "uuid": "f8f50ce5-b10f-42bc-8a43-6154970a3004",
              "parentUUID": "a8d8b3a3-2501-4e7b-a038-16042201073d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "f8f50ce5-b10f-42bc-8a43-6154970a3004"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "79993d58-7a33-4a83-a9be-649c3806f41c",
          "title": "Testes para Jobs Handlers",
          "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
          "file": "\\test\\jobs-handlers.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes para Jobs Handlers\"",
              "fullTitle": "Testes para Jobs Handlers \"before each\" hook in \"Testes para Jobs Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection = sinon.stub(mysql, \"createConnection\").returns({\n  connect: sinon.stub(),\n  query: sinon.stub(),\n});\nmockRequest = {\n  body: {},\n  params: {},\n};\nmockResponse = {\n  json: sinon.spy(),\n  sendStatus: sinon.spy(),\n};\nmockConsole = {\n  error: sinon.stub(console, \"error\"),\n  log: sinon.stub(console, \"log\"),\n};",
              "err": {},
              "uuid": "99c04e47-2882-4b51-913b-809d92899abc",
              "parentUUID": "79993d58-7a33-4a83-a9be-649c3806f41c",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testes para Jobs Handlers\"",
              "fullTitle": "Testes para Jobs Handlers \"after each\" hook in \"Testes para Jobs Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "31601d4e-1957-4acc-bf70-c3e44e3eb4a5",
              "parentUUID": "79993d58-7a33-4a83-a9be-649c3806f41c",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "c5db2d7a-2e61-4453-aeda-9aa4df146640",
              "title": "getListJobs",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
              "file": "\\test\\jobs-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma lista de jobs para o tipo \"ME\"",
                  "fullTitle": "Testes para Jobs Handlers getListJobs deve retornar uma lista de jobs para o tipo \"ME\"",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  type: \"ME\",\n  identifier: 1,\n};\nconst mockJobs = [\n  {\n    JOB_ID: 1,\n    USER_NAME_CREATED: \"User 1\",\n    EQUIPMENT_TYPE_DESCRIPTION: \"Type 1\",\n    STATUS_PROGRESS_DESCRIPTION: \"In Progress\",\n  },\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, mockJobs);\n  }),\n});\njobsHandlers.getListJobs(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ jobs: mockJobs })).to.be.true;",
                  "err": {},
                  "uuid": "667ea2d1-2142-4e9f-bd4a-f864a665e582",
                  "parentUUID": "c5db2d7a-2e61-4453-aeda-9aa4df146640",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Jobs Handlers getListJobs deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  type: \"ME\",\n  identifier: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\njobsHandlers.getListJobs(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ jobs: [] })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "55c4401e-c8e8-46d7-8f03-b5f1d488444d",
                  "parentUUID": "c5db2d7a-2e61-4453-aeda-9aa4df146640",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "667ea2d1-2142-4e9f-bd4a-f864a665e582",
                "55c4401e-c8e8-46d7-8f03-b5f1d488444d"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "36559ffd-2a9e-4e2f-b233-e1230ee345db",
              "title": "getUserInfoInitState",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
              "file": "\\test\\jobs-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar o estado inicial da página",
                  "fullTitle": "Testes para Jobs Handlers getUserInfoInitState deve retornar o estado inicial da página",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockResults = [\n  [{ CODE: \"1\", DESCRIPTION: \"Status 1\" }],\n  [{ CODE: \"2\", DESCRIPTION: \"Type 2\" }],\n  [{ CODE: \"3\", DESCRIPTION: \"Procedure 3\" }],\n  [{ CODE: \"4\", DESCRIPTION: \"Brand 4\" }],\n  [{ ID: 1, NAME: \"Client 1\" }],\n  [{ CODE: \"5\", DESCRIPTION: \"Priority 5\" }],\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(null, mockResults);\n  }),\n});\njobsHandlers.getUserInfoInitState(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ initPageState: mockResults })).to.be\n  .true;",
                  "err": {},
                  "uuid": "2db90ae2-47c2-44a3-8173-2ef1cdd79043",
                  "parentUUID": "36559ffd-2a9e-4e2f-b233-e1230ee345db",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Jobs Handlers getUserInfoInitState deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\njobsHandlers.getUserInfoInitState(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ initPageState: [] })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "3aa68527-0f17-4921-9659-8aa6ed2879b7",
                  "parentUUID": "36559ffd-2a9e-4e2f-b233-e1230ee345db",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2db90ae2-47c2-44a3-8173-2ef1cdd79043",
                "3aa68527-0f17-4921-9659-8aa6ed2879b7"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "b0b37560-7fb9-4d6d-acd9-a33e0fe172b0",
              "title": "editJobInfo",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
              "file": "\\test\\jobs-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve atualizar as informações do job com sucesso",
                  "fullTitle": "Testes para Jobs Handlers editJobInfo deve atualizar as informações do job com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n  userId: 1,\n  status: \"1\",\n  equipmentType: \"Type 1\",\n  equipmentTypeOther: \"\",\n  equipmentProcedure: \"Procedure 1\",\n  equipmentProcedureOther: \"\",\n  equipmentBrand: \"Brand 1\",\n  notes: \"Notas\",\n  priority: \"1\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon\n    .stub()\n    .onFirstCall()\n    .callsFake((query, values, callback) => {\n      callback(null, [{ PRIORITY_NUMBER: 1, TOTAL_JOBS: 1 }]);\n    })\n    .onSecondCall()\n    .callsFake((query, values, callback) => {\n      callback(null, { affectedRows: 1 });\n    }),\n});\njobsHandlers.editJobInfo(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "27160b9d-b61e-4fac-87b6-719f1685316d",
                  "parentUUID": "b0b37560-7fb9-4d6d-acd9-a33e0fe172b0",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao atualizar as informações do job",
                  "fullTitle": "Testes para Jobs Handlers editJobInfo deve retornar erro ao atualizar as informações do job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n  userId: 1,\n  status: \"1\",\n  equipmentType: \"Type 1\",\n  equipmentTypeOther: \"\",\n  equipmentProcedure: \"Procedure 1\",\n  equipmentProcedureOther: \"\",\n  equipmentBrand: \"Brand 1\",\n  notes: \"Notas\",\n  priority: \"1\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon\n    .stub()\n    .onFirstCall()\n    .callsFake((query, values, callback) => {\n      callback(new Error(\"Erro de consulta\"), null);\n    }),\n});\njobsHandlers.editJobInfo(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "7dcb0217-0ad0-403f-9a99-a4fc7a5a95fb",
                  "parentUUID": "b0b37560-7fb9-4d6d-acd9-a33e0fe172b0",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "27160b9d-b61e-4fac-87b6-719f1685316d",
                "7dcb0217-0ad0-403f-9a99-a4fc7a5a95fb"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "f0b669e0-2085-49ef-ae66-8357e32bf83f",
              "title": "createJob",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
              "file": "\\test\\jobs-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve criar um job com sucesso",
                  "fullTitle": "Testes para Jobs Handlers createJob deve criar um job com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  userId: 1,\n  userIdClient: 1,\n  status: \"1\",\n  equipmentType: \"Type 1\",\n  equipmentTypeOther: \"\",\n  equipmentProcedure: \"Procedure 1\",\n  equipmentProcedureOther: \"\",\n  equipmentBrand: \"Brand 1\",\n  notes: \"Notas\",\n  priority: \"1\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon\n    .stub()\n    .onFirstCall()\n    .callsFake((query, values, callback) => {\n      callback(null, [{ PRIORITY_NUMBER: 1 }]);\n    })\n    .onSecondCall()\n    .callsFake((query, values, callback) => {\n      callback(null, { affectedRows: 1 });\n    }),\n});\njobsHandlers.createJob(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "2fba994d-c5cd-4f80-94cc-d6a3b26cdeb6",
                  "parentUUID": "f0b669e0-2085-49ef-ae66-8357e32bf83f",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao criar um job",
                  "fullTitle": "Testes para Jobs Handlers createJob deve retornar erro ao criar um job",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  userId: 1,\n  userIdClient: 1,\n  status: \"1\",\n  equipmentType: \"Type 1\",\n  equipmentTypeOther: \"\",\n  equipmentProcedure: \"Procedure 1\",\n  equipmentProcedureOther: \"\",\n  equipmentBrand: \"Brand 1\",\n  notes: \"Notas\",\n  priority: \"1\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon\n    .stub()\n    .onFirstCall()\n    .callsFake((query, values, callback) => {\n      callback(new Error(\"Erro de consulta\"), null);\n    }),\n});\njobsHandlers.createJob(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "240053aa-4c4f-41a2-a285-13dffc00217f",
                  "parentUUID": "f0b669e0-2085-49ef-ae66-8357e32bf83f",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "2fba994d-c5cd-4f80-94cc-d6a3b26cdeb6",
                "240053aa-4c4f-41a2-a285-13dffc00217f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "746e33bb-55a5-4fef-8c6b-619b3f09312a",
              "title": "reopenJob",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
              "file": "\\test\\jobs-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve reabrir um job com sucesso",
                  "fullTitle": "Testes para Jobs Handlers reopenJob deve reabrir um job com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  JobId: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\njobsHandlers.reopenJob(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "c0a5d438-d68f-4519-85a1-a067536b70eb",
                  "parentUUID": "746e33bb-55a5-4fef-8c6b-619b3f09312a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao reabrir um job",
                  "fullTitle": "Testes para Jobs Handlers reopenJob deve retornar erro ao reabrir um job",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  JobId: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de reabertura\"), null);\n  }),\n});\njobsHandlers.reopenJob(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "e2d5f3fb-b6df-460b-9398-d3b65268ad79",
                  "parentUUID": "746e33bb-55a5-4fef-8c6b-619b3f09312a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "c0a5d438-d68f-4519-85a1-a067536b70eb",
                "e2d5f3fb-b6df-460b-9398-d3b65268ad79"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "1bf969fc-b1e5-4d23-9b6d-b1dc572d138b",
              "title": "editOrderPriority",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\jobs-handlers.test.js",
              "file": "\\test\\jobs-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve atualizar a prioridade dos jobs com sucesso",
                  "fullTitle": "Testes para Jobs Handlers editOrderPriority deve atualizar a prioridade dos jobs com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  startRowInfo: { id: 1, priorityWork: 2 },\n  endRowInfo: { id: 2, priorityWork: 1 },\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\njobsHandlers.editOrderPriority(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "1a4ddbea-27d2-41a3-a8ce-68393495631c",
                  "parentUUID": "1bf969fc-b1e5-4d23-9b6d-b1dc572d138b",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao atualizar a prioridade dos jobs",
                  "fullTitle": "Testes para Jobs Handlers editOrderPriority deve retornar erro ao atualizar a prioridade dos jobs",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  startRowInfo: { id: 1, priorityWork: 2 },\n  endRowInfo: { id: 2, priorityWork: 1 },\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de atualização\"), null);\n  }),\n});\njobsHandlers.editOrderPriority(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "99ee39c6-c4dc-4f03-b73b-025a1512e5f1",
                  "parentUUID": "1bf969fc-b1e5-4d23-9b6d-b1dc572d138b",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1a4ddbea-27d2-41a3-a8ce-68393495631c",
                "99ee39c6-c4dc-4f03-b73b-025a1512e5f1"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "2a8ed7c5-6730-47d5-8d05-c60f21a384c2",
          "title": "Testes para Messaging Handlers",
          "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\messaging-handlers.test.js",
          "file": "\\test\\messaging-handlers.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes para Messaging Handlers\"",
              "fullTitle": "Testes para Messaging Handlers \"before each\" hook in \"Testes para Messaging Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection = sinon.stub(mysql, \"createConnection\").returns({\n  connect: sinon.stub(),\n  query: sinon.stub(),\n});\nmockRequest = {\n  body: {},\n};\nmockResponse = {\n  json: sinon.spy(),\n  sendStatus: sinon.spy(),\n};\nmockConsole = {\n  error: sinon.stub(console, \"error\"),\n  log: sinon.stub(console, \"log\"),\n};",
              "err": {},
              "uuid": "6d42af10-4c80-4bfc-b8d9-68ab404f949d",
              "parentUUID": "2a8ed7c5-6730-47d5-8d05-c60f21a384c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testes para Messaging Handlers\"",
              "fullTitle": "Testes para Messaging Handlers \"after each\" hook in \"Testes para Messaging Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "8df59ae0-5e35-40e0-8f4e-97252e41f49f",
              "parentUUID": "2a8ed7c5-6730-47d5-8d05-c60f21a384c2",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "d22a8ca1-f5c6-4125-be11-119aa68b6c5d",
              "title": "loadWebSocketSettings",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\messaging-handlers.test.js",
              "file": "\\test\\messaging-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve carregar as configurações do WebSocket com sucesso",
                  "fullTitle": "Testes para Messaging Handlers loadWebSocketSettings deve carregar as configurações do WebSocket com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n};\nconst mockResults = [\n  [\n    {\n      ID: 2,\n      USERNAME: \"user2\",\n      NAME: \"User 2\",\n      EMAIL: \"user2@example.com\",\n      ROLE: \"USER\",\n    },\n  ],\n  [\n    {\n      MESSAGE_SENT_BY: 1,\n      MESSAGE_TO_ID: 2,\n      USERNAME_TO: \"user2\",\n      MESSAGE_FROM_ID: 1,\n      USERNAME_FROM: \"user1\",\n      MESSAGE: \"Hello\",\n      DATE_CREATED: \"01-JAN-2023 12:00:00\",\n      SEEN: 0,\n      MESSAGE_ID: 1,\n    },\n  ],\n  [{ DATE_NOW: \"01-JAN-2023\" }],\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, mockResults);\n  }),\n});\nmessagingHandlers.loadWebSocketSettings(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith(mockResults)).to.be.true;",
                  "err": {},
                  "uuid": "7c20fa7d-7e85-4417-a1c1-a2b6be0169cc",
                  "parentUUID": "d22a8ca1-f5c6-4125-be11-119aa68b6c5d",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Messaging Handlers loadWebSocketSettings deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\nmessagingHandlers.loadWebSocketSettings(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith([])).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "f2e968bf-3dac-4f0d-bed9-1bdc26fcbf14",
                  "parentUUID": "d22a8ca1-f5c6-4125-be11-119aa68b6c5d",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "7c20fa7d-7e85-4417-a1c1-a2b6be0169cc",
                "f2e968bf-3dac-4f0d-bed9-1bdc26fcbf14"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "709c3307-c565-44ec-9425-301771982aaa",
              "title": "messagingInsertNew",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\messaging-handlers.test.js",
              "file": "\\test\\messaging-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve inserir uma nova mensagem com sucesso",
                  "fullTitle": "Testes para Messaging Handlers messagingInsertNew deve inserir uma nova mensagem com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message = {\n  from: 1,\n  to: 2,\n  message: \"Hello\",\n  seen: 0,\n};\nconst mockInsertId = 1;\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { insertId: mockInsertId });\n  }),\n});\nconst callback = sinon.spy();\nmessagingHandlers.messagingInsertNew(message, callback);\nexpect(callback.calledWith(mockInsertId)).to.be.true;",
                  "err": {},
                  "uuid": "beb1535e-d12c-43b0-840d-e6c44ed1cc39",
                  "parentUUID": "709c3307-c565-44ec-9425-301771982aaa",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar -1 em caso de erro ao inserir uma nova mensagem",
                  "fullTitle": "Testes para Messaging Handlers messagingInsertNew deve retornar -1 em caso de erro ao inserir uma nova mensagem",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const message = {\n  from: 1,\n  to: 2,\n  message: \"Hello\",\n  seen: 0,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de inserção\"), null);\n  }),\n});\nconst callback = sinon.spy();\nmessagingHandlers.messagingInsertNew(message, callback);\nexpect(callback.calledWith(-1)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "de472cae-562a-4d0a-81b8-570249421e72",
                  "parentUUID": "709c3307-c565-44ec-9425-301771982aaa",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "beb1535e-d12c-43b0-840d-e6c44ed1cc39",
                "de472cae-562a-4d0a-81b8-570249421e72"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "42d13202-2626-406a-969a-570380f07426",
              "title": "loadWebSocketMessages",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\messaging-handlers.test.js",
              "file": "\\test\\messaging-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve carregar as mensagens do WebSocket com sucesso",
                  "fullTitle": "Testes para Messaging Handlers loadWebSocketMessages deve carregar as mensagens do WebSocket com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n};\nconst mockMessages = [\n  {\n    MESSAGE_SENT_BY: 1,\n    MESSAGE_TO_ID: 2,\n    USERNAME_TO: \"user2\",\n    MESSAGE_FROM_ID: 1,\n    USERNAME_FROM: \"user1\",\n    MESSAGE: \"Hello\",\n    DATE_CREATED: \"01-JAN-2023 12:00:00\",\n    SEEN: 0,\n    MESSAGE_ID: 1,\n  },\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, mockMessages);\n  }),\n});\nmessagingHandlers.loadWebSocketMessages(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith(mockMessages)).to.be.true;",
                  "err": {},
                  "uuid": "1c187e53-b7ac-4ad3-ad8c-c37a3bf95e2d",
                  "parentUUID": "42d13202-2626-406a-969a-570380f07426",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Messaging Handlers loadWebSocketMessages deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\nmessagingHandlers.loadWebSocketMessages(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith([])).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "8062769c-4e2f-41ab-8b38-28cf4541de8f",
                  "parentUUID": "42d13202-2626-406a-969a-570380f07426",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "1c187e53-b7ac-4ad3-ad8c-c37a3bf95e2d",
                "8062769c-4e2f-41ab-8b38-28cf4541de8f"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        },
        {
          "uuid": "ccf964c1-5242-4f5c-a7e7-33108fbe48c8",
          "title": "Testes para Users Handlers",
          "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\users-handlers.test.js",
          "file": "\\test\\users-handlers.test.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"Testes para Users Handlers\"",
              "fullTitle": "Testes para Users Handlers \"before each\" hook in \"Testes para Users Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "mockConnection = sinon.stub(mysql, \"createConnection\").returns({\n  connect: sinon.stub(),\n  query: sinon.stub(),\n});\nmockRequest = {\n  body: {},\n  params: {},\n};\nmockResponse = {\n  json: sinon.spy(),\n  sendStatus: sinon.spy(),\n};\nmockConsole = {\n  error: sinon.stub(console, \"error\"),\n  log: sinon.stub(console, \"log\"),\n};",
              "err": {},
              "uuid": "3fef1cb8-7238-4001-bfb0-b9df86a9ead2",
              "parentUUID": "ccf964c1-5242-4f5c-a7e7-33108fbe48c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"Testes para Users Handlers\"",
              "fullTitle": "Testes para Users Handlers \"after each\" hook in \"Testes para Users Handlers\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "sinon.restore();",
              "err": {},
              "uuid": "0109ffc4-51b0-4996-b4b0-04b393acfa42",
              "parentUUID": "ccf964c1-5242-4f5c-a7e7-33108fbe48c8",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [],
          "suites": [
            {
              "uuid": "13015351-f6a1-48a2-96d2-ed5987275fcd",
              "title": "getUsers",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\users-handlers.test.js",
              "file": "\\test\\users-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve retornar uma lista de usuários",
                  "fullTitle": "Testes para Users Handlers getUsers deve retornar uma lista de usuários",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockUsers = [\n  {\n    id: 1,\n    userName: \"user1\",\n    name: \"User 1\",\n    email: \"user1@example.com\",\n    roleCode: \"ADMIN\",\n    roleDescription: \"Administrator\",\n    TOTAL_JOBS: 2,\n  },\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(null, mockUsers);\n  }),\n});\nusersHandlers.getUsers(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ users: mockUsers })).to.be.true;",
                  "err": {},
                  "uuid": "8029195d-5ecb-4cbc-a6f2-bd1c39dce3e8",
                  "parentUUID": "13015351-f6a1-48a2-96d2-ed5987275fcd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Users Handlers getUsers deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\nusersHandlers.getUsers(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ users: [] })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "5aa4f79c-4e58-4d4a-bb6d-09a5ea51fb73",
                  "parentUUID": "13015351-f6a1-48a2-96d2-ed5987275fcd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "8029195d-5ecb-4cbc-a6f2-bd1c39dce3e8",
                "5aa4f79c-4e58-4d4a-bb6d-09a5ea51fb73"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "31cdbf7b-0b9f-4d72-a87a-801d6e80e0cd",
              "title": "createUser",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\users-handlers.test.js",
              "file": "\\test\\users-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve criar um usuário com sucesso",
                  "fullTitle": "Testes para Users Handlers createUser deve criar um usuário com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  name: \"User 1\",\n  userName: \"user1\",\n  email: \"user1@example.com\",\n  password: \"password123\",\n  role: \"ADMIN\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\nusersHandlers.createUser(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "a5d12a01-3b4a-4b4d-bb62-99a48fccbab1",
                  "parentUUID": "31cdbf7b-0b9f-4d72-a87a-801d6e80e0cd",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao criar um usuário",
                  "fullTitle": "Testes para Users Handlers createUser deve retornar erro ao criar um usuário",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  name: \"User 1\",\n  userName: \"user1\",\n  email: \"user1@example.com\",\n  password: \"password123\",\n  role: \"ADMIN\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de criação\"), null);\n  }),\n});\nusersHandlers.createUser(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "e42130bb-76a7-45ef-9e21-d0fba89b9b2e",
                  "parentUUID": "31cdbf7b-0b9f-4d72-a87a-801d6e80e0cd",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "a5d12a01-3b4a-4b4d-bb62-99a48fccbab1",
                "e42130bb-76a7-45ef-9e21-d0fba89b9b2e"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "3ff1493d-522d-4638-b61b-62570cf55f62",
              "title": "editUser",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\users-handlers.test.js",
              "file": "\\test\\users-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve editar um usuário com sucesso",
                  "fullTitle": "Testes para Users Handlers editUser deve editar um usuário com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n  name: \"Updated User\",\n  email: \"updated@example.com\",\n  role: \"USER\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\nusersHandlers.editUser(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ success: true })).to.be.true;",
                  "err": {},
                  "uuid": "d841a555-5d7a-413f-a81e-37205014dd6a",
                  "parentUUID": "3ff1493d-522d-4638-b61b-62570cf55f62",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao editar um usuário",
                  "fullTitle": "Testes para Users Handlers editUser deve retornar erro ao editar um usuário",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.body = {\n  id: 1,\n  name: \"Updated User\",\n  email: \"updated@example.com\",\n  role: \"USER\",\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de edição\"), null);\n  }),\n});\nusersHandlers.editUser(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ success: false })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "e8b0bb62-99b8-43f5-a1ae-1413422e4732",
                  "parentUUID": "3ff1493d-522d-4638-b61b-62570cf55f62",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "d841a555-5d7a-413f-a81e-37205014dd6a",
                "e8b0bb62-99b8-43f5-a1ae-1413422e4732"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 1,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "ad97ab55-28a9-43be-b391-098789b32d35",
              "title": "deleteUser",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\users-handlers.test.js",
              "file": "\\test\\users-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve deletar um usuário com sucesso",
                  "fullTitle": "Testes para Users Handlers deleteUser deve deletar um usuário com sucesso",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.params = {\n  id: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(null, { affectedRows: 1 });\n  }),\n});\nusersHandlers.deleteUser(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(200)).to.be.true;",
                  "err": {},
                  "uuid": "aa825020-1f12-4ef7-ba03-ec7493eff37a",
                  "parentUUID": "ad97ab55-28a9-43be-b391-098789b32d35",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar erro ao deletar um usuário",
                  "fullTitle": "Testes para Users Handlers deleteUser deve retornar erro ao deletar um usuário",
                  "timedOut": false,
                  "duration": 0,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockRequest.params = {\n  id: 1,\n};\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, values, callback) => {\n    callback(new Error(\"Erro de exclusão\"), null);\n  }),\n});\nusersHandlers.deleteUser(mockRequest, mockResponse);\nexpect(mockResponse.sendStatus.calledWith(500)).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "98533570-3850-45ff-adbe-9968273d2161",
                  "parentUUID": "ad97ab55-28a9-43be-b391-098789b32d35",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "aa825020-1f12-4ef7-ba03-ec7493eff37a",
                "98533570-3850-45ff-adbe-9968273d2161"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 0,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            },
            {
              "uuid": "01ba98b5-6d9b-4303-b85b-e59d6201862a",
              "title": "getPageSettings",
              "fullFile": "C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\test\\users-handlers.test.js",
              "file": "\\test\\users-handlers.test.js",
              "beforeHooks": [],
              "afterHooks": [],
              "tests": [
                {
                  "title": "deve carregar as configurações da página com sucesso",
                  "fullTitle": "Testes para Users Handlers getPageSettings deve carregar as configurações da página com sucesso",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "const mockSettings = [\n  { CODE: \"ADMIN\", DESCRIPTION: \"Administrator\" },\n  { CODE: \"USER\", DESCRIPTION: \"User\" },\n];\nmockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(null, mockSettings);\n  }),\n});\nusersHandlers.getPageSettings(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ pageSettings: [mockSettings] })).to\n  .be.true;",
                  "err": {},
                  "uuid": "00ca64a4-145b-4132-963c-9b0cf9305e64",
                  "parentUUID": "01ba98b5-6d9b-4303-b85b-e59d6201862a",
                  "isHook": false,
                  "skipped": false
                },
                {
                  "title": "deve retornar uma lista vazia em caso de erro",
                  "fullTitle": "Testes para Users Handlers getPageSettings deve retornar uma lista vazia em caso de erro",
                  "timedOut": false,
                  "duration": 1,
                  "state": "passed",
                  "speed": "fast",
                  "pass": true,
                  "fail": false,
                  "pending": false,
                  "context": null,
                  "code": "mockConnection.returns({\n  connect: sinon.stub(),\n  query: sinon.stub().callsFake((query, callback) => {\n    callback(new Error(\"Erro de consulta\"), null);\n  }),\n});\nusersHandlers.getPageSettings(mockRequest, mockResponse);\nexpect(mockResponse.json.calledWith({ pageSettings: [] })).to.be.true;\nexpect(mockConsole.error.calledOnce).to.be.true;",
                  "err": {},
                  "uuid": "847cc4a6-a9cc-46ea-a06c-7ee429e55304",
                  "parentUUID": "01ba98b5-6d9b-4303-b85b-e59d6201862a",
                  "isHook": false,
                  "skipped": false
                }
              ],
              "suites": [],
              "passes": [
                "00ca64a4-145b-4132-963c-9b0cf9305e64",
                "847cc4a6-a9cc-46ea-a06c-7ee429e55304"
              ],
              "failures": [],
              "pending": [],
              "skipped": [],
              "duration": 2,
              "root": false,
              "rootEmpty": false,
              "_timeout": 5000
            }
          ],
          "passes": [],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 5000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 5000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}