[{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\scripts\\authentication-handlers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\scripts\\clients-handlers.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":32,"column":165,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":169,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[1336,1342],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":48,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":69,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[1803,1809],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":64,"column":148,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":152,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[2389,2395],"text":""},"desc":"Remove unused variable 'rows'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\nconst mysql = require(\"mysql2\");\r\nconst options = require(\"./connection-options.json\");\r\n\r\nmodule.exports.getClients = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = `\r\n        SELECT C.id, C.name, C.address, C.postCode, C.email, C.nif, \r\n        SUM((CASE WHEN J.ID IS NOT NULL THEN 1 ELSE 0 END)) AS TOTAL_JOBS,\r\n        SUM((CASE WHEN J.ID IS NOT NULL AND J.STATUS = '4' THEN 1 ELSE 0 END)) AS TOTAL_JOBS_FINALISED\r\n        FROM CLIENT C \r\n        LEFT JOIN JOB J ON J.USERIDCLIENT = C.ID\r\n        GROUP BY C.id, C.name, C.address, C.postCode, C.email, C.nif\r\n        ORDER BY C.ID ASC\r\n    `;\r\n    \r\n    connection.query(query, function (err, rows) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({clients: [] });\r\n        } else {\r\n            response.json({clients: rows });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.editClient = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = \"UPDATE client SET name = ?, address = ?, postCode = ?, email = ?, nif = ? WHERE ID = ?\";\r\n    connection.query(query, [request.body.name, request.body.address, request.body.postCode, request.body.email, request.body.nif, request.body.id], function (err, rows) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({success: false});\r\n        } \r\n        else \r\n        {\r\n            response.json({success: true});\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.deleteClient = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = \"DELETE FROM client WHERE id = ?\";\r\n    connection.query(query, [request.params.id], function (err, rows) {\r\n        if (err) {\r\n            console.log(err);\r\n            response.sendStatus(500);\r\n        } \r\n        else \r\n        {\r\n            response.sendStatus(200);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.createClient = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = \"INSERT INTO CLIENT (NAME, ADDRESS, POSTCODE, EMAIL, NIF) VALUES (?, ?, ?, ?, ?)\";\r\n    connection.query(query, [request.body.name, request.body.address, request.body.postCode, request.body.email, request.body.nif], function (err, rows) {\r\n        if (err) {\r\n            console.log(err);\r\n            response.sendStatus(500);\r\n        } \r\n        else \r\n        {\r\n            response.sendStatus(200);\r\n        }\r\n    });\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\scripts\\globalHandlers.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'mysql' is assigned a value but never used.","line":2,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":2,"endColumn":12,"suggestions":[{"messageId":"removeVar","data":{"varName":"mysql"},"fix":{"range":[15,47],"text":""},"desc":"Remove unused variable 'mysql'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'options' is assigned a value but never used.","line":3,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":3,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"options"},"fix":{"range":[49,102],"text":""},"desc":"Remove unused variable 'options'."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\nconst mysql = require(\"mysql2\");\r\nconst options = require(\"./connection-options.json\");\r\n\r\n\r\n//============================================================= Logout\r\nmodule.exports.logout = (request, response) => {\r\n    request.session.User = undefined;\r\n    response.sendStatus(200);\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\scripts\\jobs-handlers.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":130,"column":60,"nodeType":"Identifier","messageId":"unusedVar","endLine":130,"endColumn":64,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[6391,6397],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":175,"column":220,"nodeType":"Identifier","messageId":"unusedVar","endLine":175,"endColumn":224,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[8065,8071],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":192,"column":70,"nodeType":"Identifier","messageId":"unusedVar","endLine":192,"endColumn":74,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[8622,8628],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'results' is defined but never used.","line":213,"column":147,"nodeType":"Identifier","messageId":"unusedVar","endLine":213,"endColumn":154,"suggestions":[{"messageId":"removeVar","data":{"varName":"results"},"fix":{"range":[9335,9344],"text":""},"desc":"Remove unused variable 'results'."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\nconst mysql = require(\"mysql2\");\r\nconst options = require(\"./connection-options.json\");\r\n\r\nmodule.exports.getListJobs = (request, response) => {\r\n    const {type, identifier} = request.body;\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = `\r\n        SELECT J.ID AS JOB_ID, J.USERID AS USER_ID_CREATED, USER_CREATION.NAME AS USER_NAME_CREATED, \r\n        J.EQUIPMENT_TYPE, J.EQUIPMENT_BRAND, EQUIPMENT_BRAND_CODE.DESCRIPTION AS EQUIPMENT_BRAND_DESCRIPTION,\r\n        CASE WHEN J.EQUIPMENT_TYPE = '100' THEN J.EQUIPMENT_TYPE_OTHER ELSE EQUIPMENT_TYPE.DESCRIPTION END AS EQUIPMENT_TYPE_DESCRIPTION,\r\n        J.EQUIPMENT_PROCEDURE,\r\n        CASE WHEN J.EQUIPMENT_PROCEDURE = '100' THEN J.EQUIPMENT_PROCEDURE_OTHER ELSE EQUIPMENT_PROCEDURE.DESCRIPTION END AS EQUIPMENT_PROCEDURE_DESCRIPTION,\r\n        UPPER(DATE_FORMAT(J.DATESTARTED, '%d-%b-%Y %H:%i')) AS DATE_STARTED,\r\n        STATUS_CODE.CODE AS STATUS_PROGRESS_CODE,\r\n        STATUS_CODE.DESCRIPTION AS STATUS_PROGRESS_DESCRIPTION,\r\n        COALESCE(UPPER(DATE_FORMAT(J.DATEFINISHED, '%d-%b-%Y %H:%i')), '-') AS DATE_FINISHED,\r\n        USER_FINALISED.NAME AS USER_FINALISED,\r\n        COALESCE(NOTES, '-') AS NOTES, \r\n        PRIORITY_CODE.CODE AS PRIORITY_CODE, PRIORITY_CODE.DESCRIPTION AS PRIORITY_DESCRIPTION, COALESCE(J.Priority_Work, 1) AS PRIORITY_WORK,\r\n        CLI.NAME AS CLIENT_NAME, CLI.EMAIL AS CLIENT_EMAIL, CLI.NIF AS CLIENT_NIF\r\n        FROM JOB J\r\n        LEFT JOIN USER USER_FINALISED ON USER_FINALISED.ID = J.USERIDFINALISED\r\n        INNER JOIN USER USER_CREATION ON USER_CREATION.ID = J.USERID\r\n        INNER JOIN CODES EQUIPMENT_BRAND_CODE ON EQUIPMENT_BRAND_CODE.DOMAIN = 'JOB_BRAND' AND EQUIPMENT_BRAND_CODE.CODE = J.EQUIPMENT_BRAND\r\n        INNER JOIN CODES STATUS_CODE ON STATUS_CODE.DOMAIN = 'JOB_STATUS' AND STATUS_CODE.CODE = J.STATUS\r\n        INNER JOIN CODES PRIORITY_CODE ON PRIORITY_CODE.DOMAIN = 'JOB_PRIORITY' AND PRIORITY_CODE.CODE = J.PRIORITY\r\n        INNER JOIN CODES EQUIPMENT_TYPE ON EQUIPMENT_TYPE.DOMAIN = 'JOB_EQUIPEMENT' AND EQUIPMENT_TYPE.CODE = J.EQUIPMENT_TYPE\r\n        INNER JOIN CODES EQUIPMENT_PROCEDURE ON EQUIPMENT_PROCEDURE.DOMAIN = 'JOB_EQUIPEMENT_PROCEDURE' AND EQUIPMENT_PROCEDURE.CODE = J.EQUIPMENT_PROCEDURE\r\n        INNER JOIN CLIENT CLI ON CLI.ID = J.USERIDCLIENT`;\r\n\r\n    let vaiablesToBind = [];\r\n\r\n    if (type === \"ME\") {\r\n        query += ` WHERE J.USERID = ? AND J.STATUS != '4'\r\n                   ORDER BY CAST(PRIORITY_CODE.CODE AS SIGNED) ASC, COALESCE(J.Priority_Work, 1) ASC`;\r\n        vaiablesToBind.push(identifier);\r\n    }\r\n    else if (type === \"ALL\") {\r\n        query += ` WHERE J.STATUS != '4'\r\n                   ORDER BY CAST(PRIORITY_CODE.CODE AS SIGNED) ASC, COALESCE(J.Priority_Work, 1) ASC`;\r\n    }\r\n    else\r\n    {\r\n        query += ` WHERE J.STATUS = ?\r\n                   ORDER BY CAST(PRIORITY_CODE.CODE AS SIGNED) ASC, COALESCE(J.Priority_Work, 1) ASC`;\r\n        vaiablesToBind.push(type);\r\n    }\r\n\r\n    connection.query(query, vaiablesToBind, function (err, rows) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({jobs: [] });\r\n        } else {\r\n            response.json({jobs: rows });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.getUserInfoInitState = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query1 = `SELECT * FROM CODES WHERE DOMAIN = 'JOB_STATUS' ORDER BY DISPLAY_ORDER ASC`;\r\n    let query2 = `SELECT * FROM CODES WHERE DOMAIN = 'JOB_EQUIPEMENT' ORDER BY DISPLAY_ORDER ASC`;\r\n    let query3 = `SELECT * FROM CODES WHERE DOMAIN = 'JOB_EQUIPEMENT_PROCEDURE' ORDER BY DISPLAY_ORDER ASC`;\r\n    let query4 = `SELECT * FROM CODES WHERE DOMAIN = 'JOB_BRAND' ORDER BY DISPLAY_ORDER ASC`;\r\n    let query5 = `SELECT ID, NAME FROM CLIENT`;\r\n    let query6 = `SELECT * FROM CODES WHERE DOMAIN = 'JOB_PRIORITY' ORDER BY DISPLAY_ORDER ASC`;\r\n\r\n    connection.query(`${query1}; ${query2}; ${query3}; ${query4}; ${query5}; ${query6}`, function (err, results) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({initPageState: [] });\r\n        } else {\r\n            response.json({initPageState: results });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.editJobInfo = (request, response) => {\r\n    const {id, userId, status, equipmentType, equipmentTypeOther, equipmentProcedure, equipmentProcedureOther, equipmentBrand, notes, priority} = request.body;   \r\n\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    \r\n    let query = `SELECT\r\n        MAX(Priority_Work) AS PRIORITY_NUMBER,\r\n        COUNT(*) AS TOTAL_JOBS\r\n        FROM JOB WHERE PRIORITY = ?`;\r\n    \r\n    connection.query(query, [priority], function (err, result) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.sendStatus(500);\r\n            return;\r\n        } \r\n        \r\n        let priorityWork = result[0].PRIORITY_NUMBER;\r\n        if (priorityWork === null) {\r\n            priorityWork = 1;\r\n        }\r\n        else\r\n        {\r\n            priorityWork++;\r\n        }\r\n\r\n        let priorityWorkTotal = result[0].TOTAL_JOBS;\r\n\r\n        if (priorityWorkTotal === 1) {\r\n            priorityWork = 1;\r\n        }\r\n\r\n        query = `UPDATE JOB SET Equipment_Type = ?, Equipment_Type_Other = ?, Equipment_Procedure = ?, \r\n                 Equipment_Procedure_Other = ?, Notes = ?, Status = ?, Equipment_Brand = ?, Priority = ?, Priority_Work = ? WHERE ID = ?`;\r\n\r\n        let parameters = [equipmentType, equipmentTypeOther, equipmentProcedure, equipmentProcedureOther,\r\n            notes, status, equipmentBrand, priority, priorityWork, id];\r\n\r\n        if (status === \"4\") {\r\n            query = `UPDATE JOB SET Equipment_Type = ?, Equipment_Type_Other = ?, Equipment_Procedure = ?, \r\n                Equipment_Procedure_Other = ?, Notes = ?, Status = ?, Equipment_Brand = ?, Priority = ?, Priority_Work = ?,\r\n                DateFinished = ?, USERIDFINALISED = ? WHERE ID = ?`;\r\n\r\n            const dateFinalised = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n            parameters = [equipmentType, equipmentTypeOther, equipmentProcedure, equipmentProcedureOther,\r\n                notes, status, equipmentBrand, priority, priorityWork, dateFinalised, userId, id];\r\n        }\r\n\r\n        connection.query(query, parameters, function (err, rows) {\r\n            if (err) {\r\n                console.log(err)\r\n                response.sendStatus(500);\r\n            } \r\n            else \r\n            {\r\n                response.sendStatus(200);\r\n            }\r\n        });\r\n\r\n    });\r\n}\r\n\r\nmodule.exports.createJob = (request, response) => {\r\n    const {userId, userIdClient, status, equipmentType, equipmentTypeOther, equipmentProcedure, equipmentProcedureOther, equipmentBrand, notes, priority} = request.body;\r\n        \r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n\r\n    let query = \"SELECT MAX(Priority_Work) AS PRIORITY_NUMBER FROM JOB WHERE PRIORITY = ?\";\r\n    \r\n    connection.query(query, [priority], function (err, result) {\r\n        if (err) {\r\n            console.log(err);\r\n            response.sendStatus(500);\r\n            return;\r\n        } \r\n\r\n        let priorityWork = result[0].PRIORITY_NUMBER;\r\n        if (priorityWork === null) {\r\n            priorityWork = 1;\r\n        }\r\n        else\r\n        {\r\n            priorityWork++;\r\n        }\r\n        \r\n        const dateStarted = new Date().toISOString().slice(0, 19).replace('T', ' ');\r\n    \r\n        query = `\r\n            INSERT INTO JOB (USERID, USERIDCLIENT, EQUIPMENT_TYPE, EQUIPMENT_TYPE_OTHER, EQUIPMENT_BRAND, EQUIPMENT_PROCEDURE, EQUIPMENT_PROCEDURE_OTHER, DATESTARTED, STATUS, NOTES, Priority, Priority_Work) \r\n            VALUES(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)\r\n        `;\r\n\r\n        connection.query(query, [userId, userIdClient, equipmentType, equipmentTypeOther, equipmentBrand, equipmentProcedure, equipmentProcedureOther, dateStarted, status, notes, priority, priorityWork], function (err, rows) {\r\n            if (err) {\r\n                console.log(err);\r\n                response.sendStatus(500);\r\n                return;\r\n            } \r\n            response.sendStatus(200);\r\n        });\r\n    });\r\n}\r\n\r\nmodule.exports.reopenJob = (request, response) => {\r\n    const {JobId} = request.body;\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = `UPDATE JOB SET STATUS = ?, DATEFINISHED = ?, USERIDFINALISED = ? WHERE ID = ?`;\r\n\r\n    connection.query(query, [\"1\", null, null, JobId], function (err, rows) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.sendStatus(500);\r\n        } else {\r\n            response.sendStatus(200);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.editOrderPriority = (request, response) => {\r\n    const { startRowInfo, endRowInfo } = request.body;\r\n\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n\r\n    let query1 = `UPDATE JOB SET Priority_Work = ? WHERE ID = ?`;\r\n    let query2 = `UPDATE JOB SET Priority_Work = ? WHERE ID = ?`;\r\n\r\n    //console.log(startRowInfo, endRowInfo);\r\n\r\n    connection.query(`${query1}; ${query2}`, [startRowInfo.priorityWork, endRowInfo.id, endRowInfo.priorityWork, startRowInfo.id], function (err, results) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.sendStatus(500);\r\n            return;\r\n        } \r\n        response.sendStatus(200);\r\n    });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\scripts\\messaging-handlers.js","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\scripts\\users-handlers.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":32,"column":150,"nodeType":"Identifier","messageId":"unusedVar","endLine":32,"endColumn":154,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[1315,1321],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":48,"column":121,"nodeType":"Identifier","messageId":"unusedVar","endLine":48,"endColumn":125,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[1849,1855],"text":""},"desc":"Remove unused variable 'rows'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'rows' is defined but never used.","line":64,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":64,"endColumn":69,"suggestions":[{"messageId":"removeVar","data":{"varName":"rows"},"fix":{"range":[2312,2318],"text":""},"desc":"Remove unused variable 'rows'."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\nconst mysql = require(\"mysql2\");\r\nconst options = require(\"./connection-options.json\");\r\n\r\nmodule.exports.getUsers = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = `\r\n        SELECT U.id, U.userName, U.name, U.email, \r\n        U.ROLE AS roleCode, ROLE_CODE.DESCRIPTION AS roleDescription,\r\n        COUNT(J.ID) AS TOTAL_JOBS\r\n        FROM USER U\r\n        INNER JOIN CODES ROLE_CODE ON ROLE_CODE.DOMAIN = 'USER_ROLE' AND ROLE_CODE.CODE = U.ROLE\r\n        LEFT JOIN JOB J ON J.USERID = U.ID\r\n        GROUP BY U.id, U.userName, U.name, U.email, U.ROLE, ROLE_CODE.DESCRIPTION \r\n        ORDER BY U.NAME ASC\r\n    `;\r\n    connection.query(query, function (err, rows) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({users: [] });\r\n        } else {\r\n            response.json({users: rows });\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.createUser = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = \"INSERT INTO user (userName, name, email, password, role) VALUES (?, ?, ?, ?, ?)\";\r\n    connection.query(query, [request.body.name, request.body.userName, request.body.email, request.body.password, request.body.role], function (err, rows) {\r\n        if (err) {\r\n            console.log(err);\r\n            response.sendStatus(500);\r\n        } \r\n        else \r\n        {\r\n            response.sendStatus(200);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.editUser = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = \"UPDATE user SET name = ?, email = ?, role = ? WHERE ID = ?\";\r\n    connection.query(query, [request.body.name, request.body.email, request.body.role, request.body.id], function (err, rows) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({success: false});\r\n        } \r\n        else \r\n        {\r\n            response.json({success: true});\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.deleteUser = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query = \"DELETE FROM user WHERE id = ?\";\r\n    connection.query(query, [request.params.id], function (err, rows) {\r\n        if (err) {\r\n            console.log(err);\r\n            response.sendStatus(500);\r\n        } \r\n        else \r\n        {\r\n            response.sendStatus(200);\r\n        }\r\n    });\r\n}\r\n\r\nmodule.exports.getPageSettings = (request, response) => {\r\n    let connection = mysql.createConnection(options);\r\n    connection.connect();\r\n    let query1 = `SELECT * FROM CODES WHERE DOMAIN = 'USER_ROLE' ORDER BY DISPLAY_ORDER ASC`;\r\n\r\n    connection.query(`${query1}`, function (err, results) {\r\n        if (err) {\r\n            console.log(err)\r\n            response.json({pageSettings: [] });\r\n        } else {\r\n            response.json({pageSettings: [results] });\r\n        }\r\n    });\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\www\\scripts\\clients.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'Client' is not defined.","line":86,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":86,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":134,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":134,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[4160,4161],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":152,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":152,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[4816,4817],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":162,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":162,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[5108,5109],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'Client' is not defined.","line":190,"column":24,"nodeType":"Identifier","messageId":"undef","endLine":190,"endColumn":30},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":294,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[9391,9394],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'__' is defined but never used.","line":294,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":294,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"__"},"fix":{"range":[9394,9398],"text":""},"desc":"Remove unused variable '__'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":310,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":310,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[10103,10106],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'__' is defined but never used.","line":310,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":310,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"__"},"fix":{"range":[10106,10110],"text":""},"desc":"Remove unused variable '__'."}]},{"ruleId":"no-undef","severity":2,"message":"'saveClientsLocalStorage' is not defined.","line":334,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":334,"endColumn":36},{"ruleId":"no-undef","severity":2,"message":"'getClientsLocalStorage' is not defined.","line":341,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":341,"endColumn":51}],"suppressedMessages":[],"errorCount":11,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\n\r\nvar clientsArray = [];\r\nvar clientTable = null;\r\n\r\n\r\n$(document).ready(()=> {\r\n    $(\"#buttonNewClientSave\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        createNewClientModalVerification();\r\n    });\r\n\r\n    $(\"#buttonNewClientOpenModel\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        createNewClientModal();\r\n    });\r\n\r\n    $(\"#buttonEditClientDelete\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkClientModalToDelete();\r\n    });\r\n\r\n    $(\"#buttonEditClientSave\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkClientModalToSave();\r\n    });\r\n\r\n    $(\"#buttonDeleteClientCancel\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkClientModalToDeleteButton(false);\r\n    });\r\n\r\n    $(\"#buttonDeleteClientConfirm\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkClientModalToDeleteButton(true);\r\n    });\r\n\r\n    $(document).on(\"click\", \"#clientsTable tbody tr td:last-child i\", function(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const clientId = parseInt($(this).attr(\"data-clientId\"));\r\n        openClientModalToEdit(clientId); \r\n    });\r\n\r\n    loadAllClients();\r\n});\r\n\r\n\r\n\r\n\r\nfunction openClientModalToEdit(clientId){    \r\n    const client = clientsArray.filter((c)=>{ return c.id === clientId; })[0];\r\n    //console.log(client);\r\n    let modal = $(\"#modalEditClients\");\r\n    modal.attr(\"data-id\", clientId);\r\n\r\n    modal.find(\"#inpEditName\").val(\"\");\r\n    modal.find(\"#inpEditEmail\").val(\"\");\r\n    modal.find(\"#inpEditAddress\").val(\"\");\r\n    modal.find(\"#inpEditPostCode\").val(\"\");\r\n    modal.find(\"#inpEditNif\").val(\"\");\r\n\r\n    modal.find(\"#inpEditName\").val(client.name);\r\n    modal.find(\"#inpEditEmail\").val(client.email);\r\n    modal.find(\"#inpEditAddress\").val(client.address);\r\n    modal.find(\"#inpEditPostCode\").val(client.postCode);\r\n    modal.find(\"#inpEditNif\").val(client.nif);\r\n\r\n    showHideModalErrorMessage(modal, false);\r\n\r\n    modal.modal(\"show\");\r\n}\r\n\r\nfunction checkClientModalToSave() {\r\n    let modal = $(\"#modalEditClients\");    \r\n    const clientId = parseInt(modal.attr(\"data-id\"));\r\n\r\n    showHideModalErrorMessage(modal, false);\r\n\r\n    const client = new Client(\r\n        clientId, \r\n        modal.find(\"#inpEditName\").val(), \r\n        modal.find(\"#inpEditAddress\").val(), \r\n        modal.find(\"#inpEditPostCode\").val(), \r\n        modal.find(\"#inpEditEmail\").val(),\r\n        modal.find(\"#inpEditNif\").val()\r\n    );\r\n    \r\n    if (client.name === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O nome é obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (client.email === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O email é obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (!client.email.includes(\"@\")) {\r\n        showHideModalErrorMessage(modal, true, \"O email não é valido.\");\r\n        return;\r\n    }\r\n\r\n    if (clientsArray.filter((c)=>{ return c.name.replace(\" \", \"\").toUpperCase() === client.name.replace(\" \", \"\").toUpperCase() && c.id !== clientId; }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Este cliente já existe\");\r\n        return;\r\n    }\r\n\r\n    if (clientsArray.filter((c)=>{ return c.email.replace(\" \", \"\").toUpperCase() === client.email.replace(\" \", \"\").toUpperCase() && c.id !== clientId; }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Um cliente com este email já existe\");\r\n        return;\r\n    }\r\n\r\n    editClientAjax(client, (status) => {\r\n        if (!status) {\r\n            showHideModalErrorMessage(modal, true, \"Algo correu mal. Tente outravez.\");\r\n            return;\r\n        }\r\n        loadAllClients();\r\n        modal.modal(\"hide\");\r\n    });\r\n}\r\n\r\nfunction checkClientModalToDelete(){\r\n    let modalEdit = $(\"#modalEditClients\");    \r\n    const clientId = parseInt(modalEdit.attr(\"data-id\"));\r\n\r\n    modalEdit.on('hidden.bs.modal', function (e) {\r\n        $(this).off('hidden.bs.modal');\r\n        let modalMessage = $(\"#modalMessage\");\r\n        modalMessage.find(\".modal-body p\").text(\"Tem a certeza que quer remover este cliente?\");\r\n        modalMessage.attr(\"data-id\", clientId);\r\n        modalMessage.modal(\"show\");\r\n    });\r\n    modalEdit.modal(\"hide\");\r\n}\r\n\r\nfunction checkClientModalToDeleteButton(toDelete){\r\n    let modalMessage = $(\"#modalMessage\");\r\n    let modalEdit = $(\"#modalEditClients\"); \r\n    const clientId = parseInt(modalMessage.attr(\"data-id\"));\r\n\r\n    showHideModalErrorMessage(modalEdit, false);\r\n\r\n    if (!toDelete) {\r\n        modalMessage.on('hidden.bs.modal', function (e) {\r\n            $(this).off('hidden.bs.modal');\r\n            modalEdit.modal(\"show\");\r\n        });\r\n        modalMessage.modal(\"hide\");\r\n        return;\r\n    }\r\n\r\n    deleteClientAjax(clientId, (success)=>{\r\n        if (!success) {\r\n            modalMessage.on('hidden.bs.modal', function (e) {\r\n                $(this).off('hidden.bs.modal');\r\n                showHideModalErrorMessage(modalEdit, true, \"Algo correu mal. Tente outravez.\");\r\n                modalEdit.modal(\"show\");\r\n            });\r\n            modalMessage.modal(\"hide\");\r\n            return;\r\n        }\r\n\r\n        loadAllClients()\r\n        modalMessage.modal(\"hide\");\r\n    });\r\n}\r\n\r\nfunction createNewClientModal(){\r\n    let modal = $(\"#modalCreateClients\");\r\n    modal.find(\"#inpCreateName\").val(\"\");\r\n    modal.find(\"#inpCreateEmail\").val(\"\");\r\n    modal.find(\"#inpCreateAddress\").val(\"\");\r\n    modal.find(\"#inpCreatePostCode\").val(\"\");\r\n    modal.find(\"#inpCreateNif\").val(\"\");\r\n    showHideModalErrorMessage(modal, false);\r\n    modal.modal(\"show\");\r\n}\r\n\r\nfunction createNewClientModalVerification(){\r\n    let modal = $(\"#modalCreateClients\");\r\n\r\n    const client = new Client(\r\n        null, \r\n        modal.find(\"#inpCreateName\").val(), \r\n        modal.find(\"#inpCreateAddress\").val(), \r\n        modal.find(\"#inpCreatePostCode\").val(), \r\n        modal.find(\"#inpCreateEmail\").val(),\r\n        modal.find(\"#inpCreateNif\").val()\r\n    );\r\n\r\n    showHideModalErrorMessage(modal, false);\r\n\r\n    if (client.name === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O nome é obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (client.email === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O email é obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (!client.email.includes(\"@\")) {\r\n        showHideModalErrorMessage(modal, true, \"O email não é valido.\");\r\n        return;\r\n    }\r\n\r\n    if (clientsArray.filter((c)=>{ return c.name.replace(\" \", \"\").toUpperCase() === client.name.replace(\" \", \"\").toUpperCase(); }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Este cliente já existe\");\r\n        return;\r\n    }\r\n\r\n    if (clientsArray.filter((c)=>{ return c.email.replace(\" \", \"\").toUpperCase() === client.email.replace(\" \", \"\").toUpperCase(); }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Um cliente com este email já existe\");\r\n        return;\r\n    }\r\n\r\n    createClientAjax(client, (success)=>{\r\n        if (!success) {\r\n            showHideModalErrorMessage(modal, true, \"Algo correu mal. Tente outravez.\");\r\n            return;\r\n        }\r\n        loadAllClients();\r\n        modal.modal(\"hide\");\r\n    });\r\n}\r\n\r\n\r\n//============================================= HELPER FUNCTIONS\r\nfunction showHideModalErrorMessage(modal, show, message) { \r\n    let errorMessage = modal.find(\".errorDivMessage\");\r\n\r\n    if (show) {\r\n        errorMessage.text(message);\r\n        errorMessage.show();\r\n    }\r\n    else\r\n    {\r\n        errorMessage.text(\"\");\r\n        errorMessage.hide();\r\n    }\r\n}\r\n\r\nfunction loadAllClients() {\r\n    let table = $(\"#clientsTable\"); \r\n\r\n    getClientsAjax((clients)=>{\r\n        clientsArray = clients;\r\n        \r\n        if (clientTable) {\r\n            clientsArray = clients;\r\n            clientTable.clear().draw();\r\n            clientTable.rows.add(clientsArray); \r\n            clientTable.columns.adjust().draw(); \r\n            return;\r\n        }\r\n\r\n        clientTable = table.DataTable({\r\n            data: clients,\r\n            language: {\r\n                lengthMenu: \"Mostrar _MENU_ clientes\",\r\n                search: `Procurar: <i class=\"fas fa-search\"></i>`,\r\n                info: \"Página _START_ de _END_\",\r\n                paginate: {\r\n                    'previous': '<span class=\"prev-icon\">Anterior</span>',\r\n                    'next': '<span class=\"next-icon\">Seguinte</span>'\r\n                }\r\n            },\r\n            searching: true,\r\n\t\t    info: true,\r\n            paging: true,\r\n            order: [],\r\n            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"All\"]],\r\n            columnDefs: [\r\n                { targets: 3, className: \"text-center\" },\r\n                { targets: 4, className: \"text-center tableJobTdIcon\", width: \"20px\" },\r\n                { orderable: false, targets: [2, 3, 4] }\r\n            ],\r\n            fnRowCallback: function(row) {\r\n                $(row).attr(\"scope\", \"row\");     \r\n            },\r\n            columns: [\r\n                { data: 'name' },\r\n                { data: 'email' },\r\n                { data: 'nif' },\r\n                { data: null, render : function (data, type, _, __) {\r\n                    if (type === \"display\") {\r\n                        if (data.TOTAL_JOBS === 0 && data.TOTAL_JOBS_FINALISED === 0) {\r\n                            return \"0\";\r\n                        }\r\n                        \r\n                        let status = data.TOTAL_JOBS_FINALISED === 1 ? \"1 finalisado em \" : (data.TOTAL_JOBS_FINALISED + \" finalisados em \");\r\n                        status += data.TOTAL_JOBS;\r\n                        return status;\r\n                    } \r\n                    else \r\n                    {\r\n                        return data;\r\n                    }\r\n                  }\r\n                },\r\n                { data: null, render : function (data, type, _, __) {\r\n                    if (type === \"display\") {\r\n                        return `<i class=\"fas fa-edit table-client-icon-edit\" data-clientId=\"${data.id}\"></i>`;\r\n                    } \r\n                    else \r\n                    {\r\n                        return data;\r\n                    }\r\n                  }\r\n                }\r\n            ]\r\n        });\r\n    });\r\n}\r\n\r\n\r\n//============================================= AJAX CALLS\r\nfunction getClientsAjax(callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"GET\", \"/api/getClients\", true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            const { clients } = xhr.response;\r\n            saveClientsLocalStorage(clients);\r\n            callback(clients);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n\r\n            const clients = getClientsLocalStorage();\r\n            callback(clients);\r\n        }\r\n    };\r\n    xhr.send();\r\n}\r\n\r\nfunction editClientAjax(client, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"PUT\", \"/api/editClient\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(xhr.response.success);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(client));\r\n}\r\n\r\nfunction deleteClientAjax(id, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"DELETE\", `/api/deleteClient/${id}`, true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send();\r\n}\r\n\r\nfunction createClientAjax(client, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"POST\", \"/api/createClient\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(client));\r\n}\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\www\\scripts\\helper.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'getBrowser' is defined but never used.","line":60,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":60,"endColumn":20,"suggestions":[{"messageId":"removeVar","data":{"varName":"getBrowser"},"fix":{"range":[1323,1474],"text":""},"desc":"Remove unused variable 'getBrowser'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'Client' is defined but never used.","line":69,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":69,"endColumn":13,"suggestions":[{"messageId":"removeVar","data":{"varName":"Client"},"fix":{"range":[1561,1821],"text":""},"desc":"Remove unused variable 'Client'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":80,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":80,"endColumn":11,"suggestions":[{"messageId":"removeVar","data":{"varName":"User"},"fix":{"range":[1825,2085],"text":""},"desc":"Remove unused variable 'User'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'JobInfo' is defined but never used.","line":91,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":91,"endColumn":14,"suggestions":[{"messageId":"removeVar","data":{"varName":"JobInfo"},"fix":{"range":[2089,2595],"text":""},"desc":"Remove unused variable 'JobInfo'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'JobTyperequest' is defined but never used.","line":110,"column":7,"nodeType":"Identifier","messageId":"unusedVar","endLine":110,"endColumn":21,"suggestions":[{"messageId":"removeVar","data":{"varName":"JobTyperequest"},"fix":{"range":[2599,2734],"text":""},"desc":"Remove unused variable 'JobTyperequest'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getClientsLocalStorage' is defined but never used.","line":195,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":195,"endColumn":32,"suggestions":[{"messageId":"removeVar","data":{"varName":"getClientsLocalStorage"},"fix":{"range":[4582,4818],"text":""},"desc":"Remove unused variable 'getClientsLocalStorage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getUsersLocalStorage' is defined but never used.","line":223,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":223,"endColumn":30,"suggestions":[{"messageId":"removeVar","data":{"varName":"getUsersLocalStorage"},"fix":{"range":[5077,5303],"text":""},"desc":"Remove unused variable 'getUsersLocalStorage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'getUserJobsLocalStorage' is defined but never used.","line":251,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":251,"endColumn":33,"suggestions":[{"messageId":"removeVar","data":{"varName":"getUserJobsLocalStorage"},"fix":{"range":[5570,5800],"text":""},"desc":"Remove unused variable 'getUserJobsLocalStorage'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'switchUserMessaging' is defined but never used.","line":402,"column":10,"nodeType":"Identifier","messageId":"unusedVar","endLine":402,"endColumn":29,"suggestions":[{"messageId":"removeVar","data":{"varName":"switchUserMessaging"},"fix":{"range":[10721,10862],"text":""},"desc":"Remove unused variable 'switchUserMessaging'."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"var userDetails = null;\r\n\r\nvar messagingMode = {\r\n    enable: true,\r\n    url: \"ws://localhost:7071/\",\r\n    ws: null,\r\n    Users: [],\r\n    UserSelected: null,\r\n    Messages: [],\r\n    dateNow: null\r\n};\r\n\r\n$(document).ready(()=>{\r\n    $(\"#buttonLogout\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        logOutAjax((success) => {\r\n            if (success) {\r\n                location.href = \"/login.html\";\r\n                return;\r\n            }\r\n            alert(\"Algo correu mal. Tente outravez.\");\r\n        });\r\n    });\r\n\r\n    $(\"#userLabelIcon\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    });\r\n\r\n    initUserDetailsAndRoles();\r\n\r\n    initWebSocketMessaging();\r\n});\r\n\r\nfunction initUserDetailsAndRoles(){\r\n    const url = location.href;\r\n    if (url.includes(\"/login.html\")) {\r\n        resetLocalStorage();\r\n        return;\r\n    }\r\n\r\n    userDetails = getUserDetails();\r\n \r\n    if (userDetails === null) {\r\n        return;\r\n    } \r\n\r\n    $(\"#userLabelIcon\").text(`${userDetails.name} (${userDetails.roleDescription})`);\r\n    $(\"#navbarDropdownMenuLinkUserId\").text(userDetails.userName);\r\n\r\n    if (userDetails.roleCode !== \"A\") {\r\n        $(\"#usersNavBarItem\").hide();\r\n    }\r\n\r\n}\r\n\r\n//Test purposes only\r\nfunction getBrowser(){\r\n    if (window.navigator.userAgent.toLowerCase().indexOf(\"edg\") > -1) {\r\n        return \"edge\";\r\n    }\r\n    return \"chrome\";\r\n}\r\n\r\n\r\n//===================================================================== Classes\r\nclass Client {    \r\n    constructor(id, name, address, postCode, email, nif) {\r\n        this.id = id;\r\n        this.name = name;\r\n        this.address = address;\r\n        this.postCode = postCode;\r\n        this.email = email;\r\n        this.nif = nif;\r\n    }\r\n}\r\n\r\nclass User {\r\n    constructor(id, userName, name, email, role, password) {\r\n        this.id = id;\r\n        this.userName = userName;\r\n        this.name = name;\r\n        this.email = email;\r\n        this.role = role;\r\n        this.password = password;\r\n    }\r\n}\r\n\r\nclass JobInfo {\r\n    constructor(id) {\r\n        this.id = id;\r\n        this.userId = 0;\r\n        this.userIdClient = 0;\r\n        this.status = \"\";\r\n        this.equipmentType = \"\";\r\n        this.equipmentBrand = \"\";\r\n        this.equipmentTypeOther = \"\";\r\n        this.equipmentProcedure = \"\";\r\n        this.equipmentProcedureOther = \"\";\r\n        this.notes = \"\";\r\n        this.dateFinished = null;\r\n        this.dateStarted = null;\r\n        this.priority = \"1\";\r\n        this.priorityWork = \"0\";\r\n    }\r\n}\r\n\r\nclass JobTyperequest {\r\n    constructor(type, identifier) {\r\n        this.type = type;\r\n        this.identifier = identifier;\r\n    }\r\n}\r\n\r\nclass MessageSocket {\r\n    constructor(type, id, from, to, message, dateCreated){\r\n        this.type = type;\r\n        this.id = id;\r\n        this.from = from;\r\n        this.to = to;\r\n        this.message = message;\r\n        this.dateCreated = dateCreated;\r\n        this.seen = \"N\";\r\n    }\r\n}\r\n\r\n//===================================================================== Logout function\r\nfunction logOutAjax(callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"GET\", \"/api/logout\", true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            resetLocalStorage();\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send();\r\n}\r\n\r\n\r\n//===================================================================== Local Storage functions\r\nfunction resetLocalStorage() {    \r\n    saveClientsLocalStorage(null);\r\n    SaveUserDetails(null);\r\n    saveUsersLocalStorage(null);\r\n    saveUserJobsLocalStorage(null);\r\n}\r\n\r\nfunction SaveUserDetails(user){\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n\r\n    if (user === null) {\r\n        localStorage.removeItem(\"userdetails\");\r\n        return;\r\n    }\r\n\r\n    localStorage.setItem(\"userdetails\", JSON.stringify(user));\r\n}\r\n\r\nfunction getUserDetails(){\r\n    if (!localStorage) {\r\n        return null;\r\n    }\r\n\r\n    const user = localStorage.getItem(\"userdetails\");\r\n\r\n    if (!user) {\r\n        return null;\r\n    }\r\n    \r\n    return JSON.parse(user);\r\n}\r\n\r\nfunction saveClientsLocalStorage(clients) {\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n\r\n    if (clients === null) {\r\n        localStorage.removeItem(\"clients\");\r\n        return;\r\n    }\r\n\r\n    localStorage.setItem(\"clients\", JSON.stringify(clients));\r\n}\r\n\r\nfunction getClientsLocalStorage() {\r\n    if (!localStorage) {\r\n        return [];\r\n    }\r\n\r\n    const clients = localStorage.getItem(\"clients\");\r\n\r\n    if (!clients) {\r\n        return [];\r\n    }\r\n    \r\n    return JSON.parse(clients);\r\n}\r\n\r\n\r\nfunction saveUsersLocalStorage(users) {\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n\r\n    if (users === null) {\r\n        localStorage.removeItem(\"users\");\r\n        return;\r\n    }\r\n\r\n    localStorage.setItem(\"users\", JSON.stringify(users));\r\n}\r\n\r\nfunction getUsersLocalStorage() {\r\n    if (!localStorage) {\r\n        return [];\r\n    }\r\n\r\n    const users = localStorage.getItem(\"users\");\r\n\r\n    if (!users) {\r\n        return [];\r\n    }\r\n    \r\n    return JSON.parse(users);\r\n}\r\n\r\n\r\nfunction saveUserJobsLocalStorage(jobs) {\r\n    if (!localStorage) {\r\n        return;\r\n    }\r\n\r\n    if (jobs === null) {\r\n        localStorage.removeItem(\"user_jobs\");\r\n        return;\r\n    }\r\n\r\n    localStorage.setItem(\"user_jobs\", JSON.stringify(jobs));\r\n}\r\n\r\nfunction getUserJobsLocalStorage() {\r\n    if (!localStorage) {\r\n        return [];\r\n    }\r\n\r\n    const jobs = localStorage.getItem(\"user_jobs\");\r\n\r\n    if (!jobs) {\r\n        return [];\r\n    }\r\n    \r\n    return JSON.parse(jobs);\r\n}\r\n\r\n\r\n\r\n\r\n\r\n//====================================================================== MESSAGING\r\nfunction initWebSocketMessaging(){\r\n    const url = location.href;\r\n    if (url.includes(\"/login.html\")) {\r\n        return;\r\n    }\r\n\r\n    const { enable } = messagingMode;\r\n  \r\n    if (!enable) {\r\n        return;\r\n    }\r\n\r\n    $(\"#topButtonMenuMessage\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        let messageContainer = $(\".container-direct-menssage\");\r\n        messageContainer.toggle();\r\n        $(\"#dropdownMessageMenuBody\").scrollTop(5000);\r\n        $(this).blur();\r\n    });\r\n\r\n    $(\"#buttonSendMessage\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        let inpMessage = $(\"#inpWebSocketMessage\");\r\n        let message = inpMessage.val();\r\n        if (message === \"\") {\r\n            return;\r\n        }\r\n \r\n        //Builds the message and sends it to the server\r\n        const menssageToSend = new MessageSocket(\"send\", 0, userDetails.id, messagingMode.UserSelected.ID, message);        \r\n        messagingMode.ws.send(JSON.stringify(menssageToSend));\r\n\r\n        //Updates UI with the message\r\n        const dateCreated = messagingMode.dateNow + ` ${new Date().getHours().toString().padStart(2, \"0\")}:${new Date().getMinutes().toString().padStart(2, \"0\")}:${new Date().getSeconds().toString().padStart(2, \"0\")}`;\r\n        let messageBody = $(\"#dropdownMessageMenuBody\");\r\n        messageBody.append(userMessageHtmlCode(userDetails.userName, dateCreated, menssageToSend.message, true));\r\n        messageBody.scrollTop(5000);\r\n    \r\n        inpMessage.val(\"\");\r\n    });\r\n    \r\n    $(document).keydown(function(e) {\r\n        if (e.key === \"Enter\") {\r\n            let messageContainer = $(\".container-direct-menssage\");\r\n            if (messageContainer.css(\"display\") === \"block\") {\r\n                $(\"#buttonSendMessage\").trigger(\"click\");\r\n            }\r\n        }\r\n    });\r\n\r\n    $(\"#topButtonMenuMessage\").show();\r\n\r\n    loadWebSocketMessagingAjax(()=>{\r\n        initWebSocketMessagingDataPage();\r\n    });\r\n}\r\n\r\nfunction initWebSocketMessagingDataPage(){\r\n    //console.log(messagingMode);\r\n    let dropdown = $(\"#dropdownMessageMenuLink\");\r\n    let ul = dropdown.parent().find(\".dropdown-menu\");\r\n    \r\n    messagingMode.Users.forEach((user)=>{\r\n        ul.append(`<a class='dropdown-item' href='#' onclick='Javascript:switchUserMessaging(${JSON.stringify(user)});'>${user.NAME}</a>`);\r\n    });\r\n\r\n    messagingMode.ws = new WebSocket(messagingMode.url);\r\n\r\n    messagingMode.ws.onopen = () => {        \r\n        const conn = new MessageSocket(\"connection\", userDetails.id);\r\n        messagingMode.ws.send(JSON.stringify(conn));\r\n    }\r\n\r\n    messagingMode.ws.onmessage = (e) => {\r\n        let message = JSON.parse(e.data);\r\n        if (message.type === \"received\") {\r\n            loadWebSocketMessagingMessagesAjax(()=>{\r\n                //Checks if the current message received is for the selected user\r\n                if (message.id !== messagingMode.UserSelected.ID) {\r\n                    return;\r\n                }\r\n\r\n                updateUserMessagingContainer();\r\n            });\r\n        }\r\n    }\r\n\r\n    updateUserMessagingContainer();\r\n}\r\n\r\nfunction updateUserMessagingContainer(){\r\n    const { UserSelected } = messagingMode;\r\n\r\n    //Updates the title message with the current user selected\r\n    $(\"#containerDirectMenssageTitle\").html(`Mensagens <span>(${UserSelected.NAME})</span>`);\r\n\r\n    let messageBody = $(\"#dropdownMessageMenuBody\");\r\n    messageBody.empty();\r\n\r\n    //Gets all messages that were sent or received with the selected user\r\n    let messages = messagingMode.Messages.filter((m)=>{ return m.MESSAGE_TO_ID === UserSelected.ID || m.MESSAGE_FROM_ID === UserSelected.ID; });\r\n    messages = messages.sort((m1, m2) => { return m1.MESSAGE_ID - m2.MESSAGE_ID; });\r\n\r\n    //Loops through all messages and builds the UI \r\n    messages.forEach((message)=>{\r\n        if (message.MESSAGE_SENT_BY === userDetails.id) {\r\n            if (message.MESSAGE_FROM_ID === userDetails.id) {\r\n                messageBody.append(userMessageHtmlCode(message.USERNAME_FROM, message.DATE_CREATED, message.MESSAGE, true));\r\n            }\r\n            else \r\n            {\r\n                messageBody.append(userMessageHtmlCode(message.USERNAME_TO, message.DATE_CREATED, message.MESSAGE, false));\r\n            }\r\n        }\r\n        else \r\n        {\r\n            if (message.MESSAGE_FROM_ID === userDetails.id) {\r\n                messageBody.append(userMessageHtmlCode(message.USERNAME_TO, message.DATE_CREATED, message.MESSAGE, true));\r\n            }\r\n            else \r\n            {\r\n                messageBody.append(userMessageHtmlCode(message.USERNAME_FROM, message.DATE_CREATED, message.MESSAGE, false));\r\n            }\r\n        }\r\n    });\r\n\r\n    messageBody.scrollTop(5000);\r\n}\r\n\r\nfunction switchUserMessaging(user) {\r\n    messagingMode.UserSelected = user;\r\n\r\n    updateUserMessagingContainer();\r\n\r\n    return false;\r\n\r\n}\r\n\r\nfunction loadWebSocketMessagingAjax(callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"POST\", `/api/loadWebSocketSettings`, true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            //console.log(xhr.response);\r\n            messagingMode.Users = xhr.response[0];\r\n            messagingMode.UserSelected = messagingMode.Users[0];\r\n            messagingMode.Messages = xhr.response[1];\r\n            messagingMode.dateNow = xhr.response[2][0].DATE_NOW;\r\n            callback();\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback();\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(userDetails));\r\n}\r\n\r\nfunction loadWebSocketMessagingMessagesAjax(callback){ \r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"POST\", `/api/loadWebSocketMessages`, true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            messagingMode.Messages = xhr.response;\r\n            callback();\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback();\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(userDetails));\r\n}\r\n\r\n//Returns html that builds the message UI\r\nfunction userMessageHtmlCode(from, date, message, us){\r\n    return `\r\n        <div class=\"message-container-info${(us ? \"\" : \" message-container-right\")}\">\r\n            <label class=\"message-title\">\r\n                <span>${(us ? (\"<small>(eu)</small> \" + from) : from)}</span> <small>(${date})</small>\r\n            </label>\r\n            <div class=\"alert alert-${(us ? \"primary\": \"success\")}\" role=\"alert\">${message}</div>\r\n        </div>\r\n    `;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\www\\scripts\\home.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":437,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":437,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[17604,17607],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'settings' is defined but never used.","line":437,"column":61,"nodeType":"Identifier","messageId":"unusedVar","endLine":437,"endColumn":69,"suggestions":[{"messageId":"removeVar","data":{"varName":"settings"},"fix":{"range":[17607,17617],"text":""},"desc":"Remove unused variable 'settings'."}]},{"ruleId":"no-undef","severity":2,"message":"'JobInfo' is not defined.","line":487,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":487,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'userDetails' is not defined.","line":488,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":488,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'JobInfo' is not defined.","line":523,"column":19,"nodeType":"Identifier","messageId":"undef","endLine":523,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'userDetails' is not defined.","line":544,"column":18,"nodeType":"Identifier","messageId":"undef","endLine":544,"endColumn":29},{"ruleId":"no-undef","severity":2,"message":"'JobTyperequest' is not defined.","line":571,"column":16,"nodeType":"Identifier","messageId":"undef","endLine":571,"endColumn":30},{"ruleId":"no-undef","severity":2,"message":"'userDetails' is not defined.","line":571,"column":57,"nodeType":"Identifier","messageId":"undef","endLine":571,"endColumn":68},{"ruleId":"no-undef","severity":2,"message":"'saveUserJobsLocalStorage' is not defined.","line":730,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":730,"endColumn":37},{"ruleId":"no-undef","severity":2,"message":"'getUserJobsLocalStorage' is not defined.","line":737,"column":26,"nodeType":"Identifier","messageId":"undef","endLine":737,"endColumn":49}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\n\r\nvar jobsArray = [];\r\nvar tableJobs;\r\nvar initPageState;\r\n\r\n$(document).ready(()=> {\r\n    $(\"#btnNewService\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        openNewServiceModal();\r\n    });\r\n\r\n    $(\".newServiceContainerOuterBodyFooter .btnClose\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        $(\"#newServiceContainer\").hide();\r\n    });\r\n\r\n    $(\".newServiceContainerOuterBodyFooter .btnSave\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        saveJobInformation();\r\n    });\r\n    \r\n    $(\".newCreateServiceContainerOuterBodyFooter .btnClose\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        $(\"#newCreateServiceContainer\").hide();\r\n    });\r\n\r\n    $(\".newCreateServiceContainerOuterBodyFooter .btnSave\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        createJobInformation();\r\n    });\r\n\r\n    $(\"#inputEquipmentType\").on(\"change\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        let option = $(this).val();\r\n\r\n        let dropEquipmentTypeTextarea = $(\"#textareaEquipmentType\");\r\n        let dropEquipmentTypeTextareaContent = dropEquipmentTypeTextarea.parent();\r\n\r\n        dropEquipmentTypeTextarea.val(\"\");\r\n\r\n        if (option === \"100\") {          \r\n            dropEquipmentTypeTextareaContent.removeClass(\"textareaEquipmentTypeDescription\");\r\n            return;\r\n        }\r\n\r\n        dropEquipmentTypeTextareaContent.addClass(\"textareaEquipmentTypeDescription\");\r\n    });\r\n\r\n    $(\"#inputEquipmentType1\").on(\"change\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        let option = $(this).val();\r\n\r\n        let dropEquipmentTypeTextarea = $(\"#textareaEquipmentType1\");\r\n        let dropEquipmentTypeTextareaContent = dropEquipmentTypeTextarea.parent();\r\n\r\n        dropEquipmentTypeTextarea.val(\"\");\r\n\r\n        if (option === \"100\") {          \r\n            dropEquipmentTypeTextareaContent.removeClass(\"textareaEquipmentTypeDescription1\");\r\n            return;\r\n        }\r\n\r\n        dropEquipmentTypeTextareaContent.addClass(\"textareaEquipmentTypeDescription1\");\r\n    });\r\n\r\n    $(\"#inputEquipmentProcedure\").on(\"change\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        let option = $(this).val();\r\n\r\n        let dropEquipmentProcedureTextarea = $(\"#textareaEquipmentProcedure\");\r\n        let dropEquipmentProcedureTextareaContent = dropEquipmentProcedureTextarea.parent();\r\n\r\n        dropEquipmentProcedureTextarea.val(\"\");\r\n\r\n        if (option === \"100\") {          \r\n            dropEquipmentProcedureTextareaContent.removeClass(\"textareaEquipmentProcedureDescription\");\r\n            return;\r\n        }\r\n\r\n        dropEquipmentProcedureTextareaContent.addClass(\"textareaEquipmentProcedureDescription\");\r\n    });\r\n\r\n    $(\"#inputEquipmentProcedure1\").on(\"change\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n\r\n        let option = $(this).val();\r\n\r\n        let dropEquipmentProcedureTextarea = $(\"#textareaEquipmentProcedure1\");\r\n        let dropEquipmentProcedureTextareaContent = dropEquipmentProcedureTextarea.parent();\r\n\r\n        dropEquipmentProcedureTextarea.val(\"\");\r\n\r\n        if (option === \"100\") {          \r\n            dropEquipmentProcedureTextareaContent.removeClass(\"textareaEquipmentProcedureDescription1\");\r\n            return;\r\n        }\r\n\r\n        dropEquipmentProcedureTextareaContent.addClass(\"textareaEquipmentProcedureDescription1\");\r\n    });\r\n\r\n    $(\"#dropDownTypeJobList\").on(\"change\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        loadListJobs();\r\n    });\r\n\r\n    $(\".newServiceContainerOuterBodyFooter .btnReopen\").on(\"click\", function(event) {\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        reopenJobAjax($(this).attr(\"data-id\"), (success)=>{\r\n            if (!success) {\r\n                alert(\"Algo correu mal. tente outravez.\");\r\n                return;\r\n            }\r\n            $(\"#inputEquipmentType\").removeAttr(\"disabled\");\r\n            $(\"#inputEquipmentBrand\").removeAttr(\"disabled\");\r\n            $(\"#textareaEquipmentType\").removeAttr(\"disabled\");\r\n            $(\"#inputEquipmentProcedure\").removeAttr(\"disabled\");\r\n            $(\"#textareaEquipmentProcedure\").removeAttr(\"disabled\");\r\n            $(\"#textareaJobNotes\").removeAttr(\"disabled\");\r\n        \r\n            let editJobStatus = $(\"#inputJobStatus\");\r\n            editJobStatus.removeAttr(\"disabled\");\r\n            editJobStatus.find(`option[value='1']`).prop(\"selected\", true);\r\n\r\n            let divInfoFinalised = $(\".editJobFinalisedDiv\");\r\n            divInfoFinalised.find(\".alert\").html(\"\");\r\n            divInfoFinalised.hide();\r\n\r\n            $(\".newServiceContainerOuterBodyFooter .btnReopen\").hide();\r\n\r\n            loadListJobs();\r\n     \r\n        });\r\n    });\r\n    \r\n    $(document).on(\"dragstart\", \".jobEditCardDetailsPriority .card-body-body .badge\", function(event) {  \r\n        event.originalEvent.dataTransfer.effectAllowed = \"move\";\r\n        event.originalEvent.dataTransfer.setData(\"code\", $(event.target).attr(\"data-code\"));\r\n    });\r\n\r\n    $(document).on(\"dragover\", \".jobEditCardDetailsPriority .card-body-header\", function(event) {  \r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    })\r\n    .on(\"dragleave\", \".jobEditCardDetailsPriority .card-body-header\", function(event) { \r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    })\r\n    .on(\"drop\", \".jobEditCardDetailsPriority .card-body-header\", function(event) { \r\n        const code = event.originalEvent.dataTransfer.getData(\"code\");\r\n        setPriorityCard(code, \"jobEditCardDetailsPriority\");\r\n    });\r\n\r\n    $(document).on(\"dragstart\", \".jobCreateCardDetailsPriority .card-body-body .badge\", function(event) {  \r\n        event.originalEvent.dataTransfer.effectAllowed = \"move\";\r\n        event.originalEvent.dataTransfer.setData(\"code\", $(event.target).attr(\"data-code\"));\r\n    });\r\n\r\n    $(document).on(\"dragover\", \".jobCreateCardDetailsPriority .card-body-header\", function(event) {  \r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    })\r\n    .on(\"dragleave\", \".jobCreateCardDetailsPriority .card-body-header\", function(event) { \r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    })\r\n    .on(\"drop\", \".jobCreateCardDetailsPriority .card-body-header\", function(event) { \r\n        const code = event.originalEvent.dataTransfer.getData(\"code\");\r\n        setPriorityCard(code, \"jobCreateCardDetailsPriority\");\r\n    });\r\n\r\n\r\n    $(document).on(\"dragstart\", \"#jobsTable tbody tr\", function(event) {  \r\n        event.originalEvent.dataTransfer.effectAllowed = \"move\";\r\n        event.originalEvent.dataTransfer.setData(\"rowInfo\", $(event.target).attr(\"data-rowinfo\"));\r\n    });\r\n    \r\n    $(document).on(\"dragover\", \"#jobsTable tbody tr\", function(event) {  \r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    })\r\n    .on(\"dragleave\", \"#jobsTable tbody tr\", function(event) { \r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n    })\r\n    .on(\"drop\", \"#jobsTable tbody tr\", function(event) { \r\n        const startRowInfo = JSON.parse(event.originalEvent.dataTransfer.getData(\"rowInfo\"));\r\n        let endRowInfo = $(event.target);\r\n        if (endRowInfo[0].tagName === \"TD\") {\r\n            endRowInfo = endRowInfo.parent();\r\n        }\r\n        else if (endRowInfo[0].tagName === \"SPAN\" || endRowInfo[0].tagName === \"I\"|| endRowInfo[0].tagName === \"SMALL\") {\r\n            endRowInfo = endRowInfo.parent().parent();\r\n        }\r\n        else if (endRowInfo[0].tagName === \"B\") {\r\n            endRowInfo = endRowInfo.parent().parent().parent();\r\n        }\r\n\r\n        endRowInfo = JSON.parse(endRowInfo.attr(\"data-rowinfo\"));\r\n\r\n        if (startRowInfo.priority !== endRowInfo.priority) {\r\n            return;\r\n        }\r\n\r\n        editOrderPriority(startRowInfo, endRowInfo, (success)=>{\r\n            if (!success) {\r\n                return;\r\n            }\r\n            loadListJobs();\r\n        })\r\n        \r\n    });\r\n\r\n    getInformationTobuildInitialPageStateAjax(()=>{\r\n        buildInitialPageState();\r\n        loadListJobs();\r\n    });\r\n\r\n    $(document).on(\"click\", \"#jobsTable tbody tr td:last-child i\", function(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const jobId = parseInt($(this).attr(\"data-jobid\"));\r\n        editJobOpenModal(jobId); \r\n    });\r\n\r\n});\r\n\r\nfunction buildInitialPageState(){\r\n    if (initPageState === 0) {\r\n        return;\r\n    }\r\n\r\n    //console.log(initPageState);\r\n    let dropEquipmentType = $(\"#inputEquipmentType\");\r\n    let dropEquipmentType2 = $(\"#inputEquipmentType1\");\r\n    initPageState[1].forEach((jobEquipment)=>{\r\n        dropEquipmentType.append(`<option value='${jobEquipment.code}'>${jobEquipment.description}</option>`);\r\n        dropEquipmentType2.append(`<option value='${jobEquipment.code}'>${jobEquipment.description}</option>`);\r\n    });\r\n\r\n    let dropEquipmentBrand = $(\"#inputEquipmentBrand\");\r\n    let dropEquipmentBrand2= $(\"#inputEquipmentBrand1\");\r\n    initPageState[3].forEach((brand)=>{\r\n        dropEquipmentBrand.append(`<option value='${brand.code}'>${brand.description}</option>`);\r\n        dropEquipmentBrand2.append(`<option value='${brand.code}'>${brand.description}</option>`);\r\n    });\r\n\r\n    let dropEquipmentProcedure = $(\"#inputEquipmentProcedure\");\r\n    let dropEquipmentProcedure2 = $(\"#inputEquipmentProcedure1\");\r\n    initPageState[2].forEach((jobEquipment)=>{\r\n        dropEquipmentProcedure.append(`<option value='${jobEquipment.code}'>${jobEquipment.description}</option>`);\r\n        dropEquipmentProcedure2.append(`<option value='${jobEquipment.code}'>${jobEquipment.description}</option>`);\r\n    });\r\n\r\n    let editJobStatus = $(\"#inputJobStatus\");\r\n    let editJobStatus2 = $(\"#inputJobStatus1\");\r\n    initPageState[0].forEach((status)=>{\r\n        editJobStatus.append(`<option value='${status.code}'>${status.description}</option>`);\r\n        editJobStatus2.append(`<option value='${status.code}'>${status.description}</option>`);\r\n    });\r\n\r\n    let dropDownTypeJobList = $(\"#dropDownTypeJobList\");\r\n    let tempList = [\r\n        { code: \"ME\", description: \"Mostrar os meus trabalhos\"},\r\n        { code: \"ALL\", description: \"Mostrar todos os trabalhos\"}\r\n    ];\r\n    tempList.forEach((status)=>{\r\n        dropDownTypeJobList.append(`<option value='${status.code}'>${status.description}</option>`);\r\n    });\r\n\r\n    initPageState[0].forEach((status)=>{\r\n        dropDownTypeJobList.append(`<option value='${status.code}'>${status.description}</option>`);\r\n    });\r\n\r\n    let dropCreateClient = $(\"#dropCreateClient\");\r\n    [{ID: 0, NAME: \"Selecionar cliente\"}].forEach((client)=>{\r\n        dropCreateClient.append(`<option value='${client.ID}'>${client.NAME}</option>`);\r\n    });\r\n    initPageState[4].forEach((client)=>{\r\n        dropCreateClient.append(`<option value='${client.ID}'>${client.NAME}</option>`);\r\n    });\r\n}\r\n\r\nfunction loadListJobs() {\r\n    getListJobsAjax(getCurrentTypeStatusJobScreen(), (jobs)=>{\r\n        jobsArray = jobs;\r\n        //console.log(jobsArray);\r\n        createTable(jobsArray);\r\n    });\r\n}\r\n\r\nfunction createTable(jobs) {\r\n    let table = $(\"#jobsTable\");\r\n\r\n    if (tableJobs) {\r\n        tableJobs.clear().draw();\r\n        tableJobs.rows.add(jobs); \r\n        tableJobs.columns.adjust().draw(); \r\n        return;\r\n    }\r\n\r\n    tableJobs = table.DataTable({\r\n        data: jobs,\r\n        language: {\r\n            lengthMenu: \"Mostrar _MENU_ serviços\",\r\n            search: `Procurar: <i class=\"fas fa-search\"></i>`,\r\n            info: \"Página _START_ de _END_\",\r\n            paginate: {\r\n                'previous': '<span class=\"prev-icon\">Anterior</span>',\r\n                'next': '<span class=\"next-icon\">Seguinte</span>'\r\n            },\r\n            sEmptyTable: \"Não existem serviços para este estado.\",\r\n            // sSearch: \"your-text-here\"\r\n        },\r\n        searching: true,\r\n        info: true,\r\n        paging: true,\r\n        order: [],\r\n        lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"All\"]],\r\n        fnRowCallback: function(row, rowData) {\r\n            let rowInfo = {\r\n                id: rowData.JOB_ID,\r\n                priority: rowData.PRIORITY_CODE,\r\n                priorityWork: rowData.PRIORITY_WORK\r\n            };\r\n\r\n            $(row).attr(\"scope\", \"row\").attr(\"draggable\", \"true\").attr(\"data-rowinfo\", JSON.stringify(rowInfo));     \r\n        },\r\n        columnDefs: [\r\n            { targets: 0, className: \"text-center\", width: \"25px\" },\r\n            { targets: 2, width: \"115px\" },\r\n            { targets: 4, className: \"text-center\" },\r\n            { targets: 5, className: \"text-center\" },\r\n            { targets: 7, className: \"text-center tableJobTdIcon\", width: \"20px\" },\r\n            { orderable: false, targets: [1, 2, 3, 4, 5, 6, 7] },\r\n        ],\r\n        columns: [\r\n            { data: 'JOB_ID' },\r\n            { data: null, render : function (rowData, type) {\r\n                if (type === \"display\") {\r\n                    return `${rowData.EQUIPMENT_TYPE_DESCRIPTION} (${rowData.EQUIPMENT_BRAND_DESCRIPTION})<br><small>(${rowData.EQUIPMENT_PROCEDURE_DESCRIPTION})</small>`;\r\n                } \r\n                else \r\n                {\r\n                    return rowData;\r\n                }\r\n             }\r\n            },\r\n            { data: null, render : function (rowData, type) {\r\n                if (type === \"display\") {\r\n                    return `${rowData.USER_NAME_CREATED}<br><small>(${rowData.DATE_STARTED})</small>`;\r\n                } \r\n                else \r\n                {\r\n                    return rowData;\r\n                }\r\n             }\r\n            },\r\n            { data: null, render : function (rowData, type) {\r\n                if (type === \"display\") {\r\n                    return `${rowData.CLIENT_NAME}<br><small>(${rowData.CLIENT_EMAIL})</small>`;\r\n                } \r\n                else \r\n                {\r\n                    return rowData;\r\n                }\r\n             }\r\n            },\r\n            { data: null, render : function (rowData, type) {\r\n                    if (type === \"display\") {\r\n                        if (rowData.STATUS_PROGRESS_CODE === \"1\") { //Em progresso\r\n                            return `<span class=\"badge badge-secondary\">${rowData.STATUS_PROGRESS_DESCRIPTION}</span>`;\r\n                        }\r\n                        else if (rowData.STATUS_PROGRESS_CODE === \"2\") { //Pendente\r\n                            return `<span class=\"badge badge-danger\">${rowData.STATUS_PROGRESS_DESCRIPTION}</span>`;\r\n                        }\r\n                        else if (rowData.STATUS_PROGRESS_CODE === \"3\") { //Em espera\r\n                            return `<span class=\"badge badge-warning\">${rowData.STATUS_PROGRESS_DESCRIPTION}</span>`;\r\n                        }\r\n                        else if (rowData.STATUS_PROGRESS_CODE === \"4\") { //Concluido\r\n                            return `<span class=\"badge badge-dark\">${rowData.STATUS_PROGRESS_DESCRIPTION}</span><br><small>(${rowData.DATE_FINISHED})</small>`;\r\n                        }\r\n                        else if (rowData.STATUS_PROGRESS_CODE === \"5\") { //A espera de material \r\n                            return `<span class=\"badge badge-warning\">${rowData.STATUS_PROGRESS_DESCRIPTION}</span>`;\r\n                        }\r\n                        else \r\n                        {\r\n                            return rowData.STATUS_PROGRESS_DESCRIPTION;\r\n                        }\r\n                    } \r\n                    else \r\n                    {\r\n                        return rowData;\r\n                    }\r\n              }\r\n            },\r\n            { data: null, render : function (rowData, type) {\r\n                if (type === \"display\") {\r\n                    if (rowData.PRIORITY_CODE === \"1\") { //Prioridade máxima\r\n                        return `<span class=\"badge badge-danger\">${rowData.PRIORITY_DESCRIPTION}</span><br><small><b>(${rowData.PRIORITY_WORK})</b></small>`;\r\n                    }\r\n                    else if (rowData.PRIORITY_CODE === \"2\") { //Prioridade média\r\n                        return `<span class=\"badge badge-warning\">${rowData.PRIORITY_DESCRIPTION}</span><br><small><b>(${rowData.PRIORITY_WORK})</b></small>`;\r\n                    }\r\n                    else if (rowData.PRIORITY_CODE === \"3\") { //Prioridade normal\r\n                        return `<span class=\"badge badge-light\">${rowData.PRIORITY_DESCRIPTION}</span><br><small><b>(${rowData.PRIORITY_WORK})</b></small>`;\r\n                    }\r\n                    else if (rowData.PRIORITY_CODE === \"4\") { //Prioridade baixa\r\n                        return `<span class=\"badge badge-secondary\">${rowData.PRIORITY_DESCRIPTION}</span><br><small><b>(${rowData.PRIORITY_WORK})</b></small>`;\r\n                    }\r\n                    else \r\n                    {\r\n                        return rowData.STATUS_PROGRESS_DESCRIPTION;\r\n                    }\r\n                } \r\n                else \r\n                {\r\n                    return rowData;\r\n                }\r\n             }\r\n            },\r\n            { data: 'NOTES' },\r\n            { data: null, render : function (data, type, _, settings) {\r\n                if (type === \"display\") {\r\n                    return `<i class=\"fas fa-edit table-job-icon-edit\" data-jobid=\"${data.JOB_ID}\"></i>`;\r\n                } \r\n                else  \r\n                { \r\n                    return data;\r\n                }\r\n              }\r\n            }\r\n        ]\r\n    });\r\n}\r\n\r\nfunction openNewServiceModal(){\r\n    let container = $(\"#newCreateServiceContainer\");\r\n\r\n    let dropEquipmentType = $(\"#inputEquipmentType1\");\r\n    dropEquipmentType.find(`option[value='1']`).prop(\"selected\", true);\r\n\r\n    let textareaEquipmentType1 = $(\"#textareaEquipmentType1\");\r\n    textareaEquipmentType1.val(\"\");\r\n    textareaEquipmentType1.parent().addClass(\"textareaEquipmentTypeDescription1\");\r\n\r\n    let dropEquipmentBrand= $(\"#inputEquipmentBrand1\");\r\n    dropEquipmentBrand.find(`option[value='1']`).prop(\"selected\", true);\r\n\r\n    let dropEquipmentProcedure = $(\"#inputEquipmentProcedure1\");\r\n    dropEquipmentProcedure.find(`option[value='1']`).prop(\"selected\", true);\r\n\r\n    let textareaEquipmentProcedure1 = $(\"#textareaEquipmentProcedure1\");\r\n    textareaEquipmentProcedure1.val(\"\");\r\n    textareaEquipmentProcedure1.parent().addClass(\"textareaEquipmentProcedureDescription1\");\r\n\r\n    let editJobStatus = $(\"#inputJobStatus1\");\r\n    editJobStatus.find(`option[value='1']`).prop(\"selected\", true);\r\n    editJobStatus.find(`option[value='4']`).hide();\r\n\r\n    let dropCreateClient = $(\"#dropCreateClient\");\r\n    dropCreateClient.find(`option[value='0']`).prop(\"selected\", true);\r\n\r\n    setPriorityCard(\"4\", \"jobCreateCardDetailsPriority\");\r\n\r\n    container.show();\r\n}\r\n\r\nfunction saveJobInformation(){\r\n    let container = $(\"#newServiceContainer\");\r\n    const jobId = parseInt( container.attr(\"data-jobId\"));\r\n   \r\n    let job = new JobInfo(jobId);\r\n    job.userId = userDetails.id;\r\n\r\n    job.equipmentType = $(\"#inputEquipmentType\").val();\r\n    if (job.equipmentType === \"100\") {\r\n        job.equipmentTypeOther = $(\"#textareaEquipmentType\").val();\r\n    }\r\n\r\n    job.equipmentBrand = $(\"#inputEquipmentBrand\").val();\r\n\r\n    job.equipmentProcedure = $(\"#inputEquipmentProcedure\").val();\r\n    if (job.equipmentProcedure === \"100\") {\r\n        job.equipmentProcedureOther = $(\"#textareaEquipmentProcedure\").val();\r\n    }\r\n\r\n    job.notes = $(\"#textareaJobNotes\").val();\r\n\r\n    job.status = $(\"#inputJobStatus\").val();\r\n\r\n    job.priority = $(\".jobEditCardDetailsPriority\").find(\".card-body-header .badge\").attr(\"data-code\");\r\n \r\n    editJobInfoAjax(job, (success) => {\r\n        if (!success) {\r\n            alert(\"Algo correu mal. tente outravez.\");\r\n            return;\r\n        }\r\n\r\n        loadListJobs();\r\n        container.hide();\r\n    });\r\n\r\n}\r\n\r\nfunction createJobInformation() {\r\n    let container = $(\"#newCreateServiceContainer\");\r\n\r\n    let job = new JobInfo(0);\r\n\r\n    job.equipmentType = $(\"#inputEquipmentType1\").val();\r\n    if (job.equipmentType === \"100\") {\r\n        job.equipmentTypeOther = $(\"#textareaEquipmentType1\").val();\r\n    }\r\n\r\n    job.equipmentBrand = $(\"#inputEquipmentBrand1\").val();\r\n\r\n    job.equipmentProcedure = $(\"#inputEquipmentProcedure1\").val();\r\n    if (job.equipmentProcedure === \"100\") {\r\n        job.equipmentProcedureOther = $(\"#textareaEquipmentProcedure1\").val();\r\n    }\r\n\r\n    job.notes = $(\"#textareaJobNotes1\").val();\r\n    if (job.notes === \"\") {\r\n        job.notes = null;\r\n    }\r\n\r\n    job.status = $(\"#inputJobStatus1\").val();\r\n\r\n    job.userId = userDetails.id;\r\n\r\n    job.userIdClient = parseInt($(\"#dropCreateClient\").val());\r\n\r\n    job.priority = $(\".jobCreateCardDetailsPriority\").find(\".card-body-header .badge\").attr(\"data-code\");\r\n\r\n    if (job.userIdClient === 0) {\r\n        alert(\"Cliente tem de ser especificado.\");\r\n        return;\r\n    }\r\n\r\n    createNewJobAjax(job, (success) => {\r\n        if (!success) {\r\n            alert(\"Algo correu mal. Tente outravez.\");\r\n            return;\r\n        }\r\n\r\n        loadListJobs();\r\n        container.hide();\r\n    });\r\n}\r\n\r\n\r\n\r\n//============================================= HELPER FUNCTIONS\r\nfunction getCurrentTypeStatusJobScreen(){\r\n    let option = $(\"#dropDownTypeJobList\").val();\r\n    return new JobTyperequest(option, option === \"ME\" ? userDetails.id : 0);\r\n}\r\n\r\nfunction editJobOpenModal(jobId){\r\n    let job = jobsArray.filter((j)=>{ return j.JOB_ID === jobId; })[0];\r\n  \r\n    let dropEquipmentType = $(\"#inputEquipmentType\");\r\n    dropEquipmentType.find(`option[value='${job.EQUIPMENT_TYPE}']`).prop(\"selected\", true);\r\n\r\n    let dropEquipmentBrand = $(\"#inputEquipmentBrand\");\r\n    dropEquipmentBrand.find(`option[value='${job.EQUIPMENT_BRAND}']`).prop(\"selected\", true);\r\n\r\n    let dropEquipmentTypeTextarea = $(\"#textareaEquipmentType\");\r\n    let dropEquipmentTypeTextareaContent = dropEquipmentTypeTextarea.parent();\r\n\r\n    if (job.EQUIPMENT_TYPE === \"100\") {  \r\n        dropEquipmentTypeTextarea.val(job.EQUIPMENT_TYPE_DESCRIPTION);        \r\n        dropEquipmentTypeTextareaContent.removeClass(\"textareaEquipmentTypeDescription\");\r\n    }\r\n    else\r\n    {\r\n        dropEquipmentTypeTextarea.val(\"\");        \r\n        dropEquipmentTypeTextareaContent.addClass(\"textareaEquipmentTypeDescription\");\r\n    }\r\n\r\n    let dropEquipmentProcedure = $(\"#inputEquipmentProcedure\");\r\n    dropEquipmentProcedure.find(`option[value='${job.EQUIPMENT_PROCEDURE}']`).prop(\"selected\", true);\r\n\r\n    let dropEquipmentProcedureTextarea = $(\"#textareaEquipmentProcedure\");\r\n    let dropEquipmentProcedureTextareaContent = dropEquipmentProcedureTextarea.parent();\r\n\r\n    if (job.EQUIPMENT_PROCEDURE === \"100\") {          \r\n        dropEquipmentProcedureTextarea.val(job.EQUIPMENT_TYPE_DESCRIPTION);        \r\n        dropEquipmentProcedureTextareaContent.removeClass(\"textareaEquipmentProcedureDescription\");\r\n    }\r\n    else\r\n    {\r\n        dropEquipmentProcedureTextarea.val(\"\");        \r\n        dropEquipmentProcedureTextareaContent.addClass(\"textareaEquipmentProcedureDescription\");\r\n    }\r\n\r\n    let notes = $(\"#textareaJobNotes\");\r\n    notes.val(job.NOTES);\r\n\r\n    let clientName =  $(\"#inputClientName\");\r\n    clientName.val(job.CLIENT_NAME);\r\n\r\n    let clientEmail = $(\"#inputClientEmail\");\r\n    clientEmail.val(job.CLIENT_EMAIL);\r\n\r\n    let clientNif = $(\"#inputClientNif\");\r\n    clientNif.val(job.CLIENT_NIF);\r\n\r\n    let editJobStatus = $(\"#inputJobStatus\");\r\n    editJobStatus.find(`option[value='${job.STATUS_PROGRESS_CODE}']`).prop(\"selected\", true);\r\n    editJobStatus.find(`option[value='4']`).show();\r\n\r\n    setPriorityCard(job.PRIORITY_CODE, \"jobEditCardDetailsPriority\");\r\n    \r\n    let divInfoFinalised = $(\".editJobFinalisedDiv\");\r\n\r\n    let buttonReopenJob = $(\".newServiceContainerOuterBodyFooter .btnReopen\");\r\n\r\n    let jobEditCardDetailsPriority = $(\".jobEditCardDetailsPriority\").find(\".card-body-body\");\r\n    \r\n    if (job.STATUS_PROGRESS_CODE === \"4\") {\r\n        dropEquipmentType.attr(\"disabled\", \"disabled\");\r\n        dropEquipmentBrand.attr(\"disabled\", \"disabled\");\r\n        dropEquipmentTypeTextarea.attr(\"disabled\", \"disabled\");\r\n        dropEquipmentProcedure.attr(\"disabled\", \"disabled\");\r\n        dropEquipmentProcedureTextarea.attr(\"disabled\", \"disabled\");\r\n        notes.attr(\"disabled\", \"disabled\");\r\n        editJobStatus.attr(\"disabled\", \"disabled\");\r\n\r\n       \r\n        divInfoFinalised.find(\".alert\").html(`Concluido por: ${job.USER_FINALISED} <small>(${job.DATE_FINISHED})</small>`);\r\n        divInfoFinalised.show();\r\n\r\n        jobEditCardDetailsPriority.hide();\r\n\r\n        buttonReopenJob.attr(\"data-id\", job.JOB_ID);\r\n        buttonReopenJob.show();        \r\n    }\r\n    else\r\n    {\r\n        dropEquipmentType.removeAttr(\"disabled\");\r\n        dropEquipmentBrand.removeAttr(\"disabled\");\r\n        dropEquipmentTypeTextarea.removeAttr(\"disabled\");\r\n        dropEquipmentProcedure.removeAttr(\"disabled\");\r\n        dropEquipmentProcedureTextarea.removeAttr(\"disabled\");\r\n        notes.removeAttr(\"disabled\");\r\n        editJobStatus.removeAttr(\"disabled\");\r\n\r\n        divInfoFinalised.find(\".alert\").html(\"\");\r\n        divInfoFinalised.hide();\r\n\r\n        jobEditCardDetailsPriority.show();\r\n\r\n        buttonReopenJob.hide();\r\n    }\r\n\r\n    let container = $(\"#newServiceContainer\");\r\n    container.attr(\"data-jobId\", jobId);\r\n    container.show();\r\n}\r\n\r\nfunction setPriorityCard(prioritySelected, classCard){\r\n    const priorityList = initPageState[5];\r\n    // console.log(prioritySelected);\r\n    // console.log(priorityList);\r\n\r\n    let jobCardDetailsPriority = $(`.${classCard}`);\r\n    let jobCardDetailsPriorityHeader = jobCardDetailsPriority.find(\".card-body-header\");\r\n    let jobCardDetailsPriorityBody = jobCardDetailsPriority.find(\".card-body-body\");\r\n    jobCardDetailsPriorityHeader.empty();\r\n    jobCardDetailsPriorityBody.empty();\r\n\r\n    priorityList.filter((p)=>{ return p.code === prioritySelected; }).forEach((p)=>{\r\n        if (p.code === \"1\") {\r\n            jobCardDetailsPriorityHeader.append(`<span data-code=\"${p.code}\" class=\"badge badge-danger\">${p.description}</span>`);\r\n        }\r\n        else if (p.code === \"2\") {\r\n            jobCardDetailsPriorityHeader.append(`<span data-code=\"${p.code}\" class=\"badge badge-warning\">${p.description}</span>`);\r\n        }\r\n        else if (p.code === \"3\") {\r\n            jobCardDetailsPriorityHeader.append(`<span data-code=\"${p.code}\" class=\"badge badge-light\">${p.description}</span>`);\r\n        }\r\n        else if (p.code === \"4\") {\r\n            jobCardDetailsPriorityHeader.append(`<span data-code=\"${p.code}\" class=\"badge badge-secondary\">${p.description}</span>`);\r\n        }\r\n    });\r\n\r\n    priorityList.filter((p)=>{ return p.code !== prioritySelected; }).forEach((p)=>{\r\n        if (p.code === \"1\") {\r\n            jobCardDetailsPriorityBody.append(`<span draggable=\"true\" data-code=\"${p.code}\" class=\"badge badge-danger\">${p.description}</span>`);\r\n        }\r\n        else if (p.code === \"2\") {\r\n            jobCardDetailsPriorityBody.append(`<span draggable=\"true\" data-code=\"${p.code}\" class=\"badge badge-warning\">${p.description}</span>`);\r\n        }\r\n        else if (p.code === \"3\") {\r\n            jobCardDetailsPriorityBody.append(`<span draggable=\"true\" data-code=\"${p.code}\" class=\"badge badge-light\">${p.description}</span>`);\r\n        }\r\n        else if (p.code === \"4\") {\r\n            jobCardDetailsPriorityBody.append(`<span draggable=\"true\" data-code=\"${p.code}\" class=\"badge badge-secondary\">${p.description}</span>`);\r\n        }\r\n    });\r\n}\r\n\r\n\r\n\r\n//============================================= AJAX CALLS\r\nfunction getListJobsAjax(type, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"POST\", `/api/getListJobs`, true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            const { jobs } = xhr.response;\r\n            saveUserJobsLocalStorage(jobs);\r\n            callback(jobs);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n\r\n            const jobs = getUserJobsLocalStorage();\r\n            callback(jobs);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(type));\r\n}\r\n\r\nfunction getInformationTobuildInitialPageStateAjax(callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"GET\", \"/api/getUserInfoInitState\", true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            initPageState = xhr.response.initPageState;\r\n            callback();\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback();\r\n        }\r\n    };\r\n    xhr.send();\r\n}\r\n\r\nfunction editJobInfoAjax(job, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"PUT\", \"/api/editJobInfo\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(job));\r\n}\r\n\r\nfunction createNewJobAjax(job, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"POST\", \"/api/createJob\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(job));\r\n}\r\n\r\nfunction reopenJobAjax(JobId, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"PUT\", \"/api/reopenJob\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify({JobId: JobId}));\r\n}\r\n\r\nfunction editOrderPriority(startRowInfo, endRowInfo, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"PUT\", \"/api/editOrderPriority\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify({startRowInfo: startRowInfo, endRowInfo: endRowInfo}));\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\www\\scripts\\login.js","messages":[{"ruleId":"no-undef","severity":2,"message":"'resetLocalStorage' is not defined.","line":3,"column":5,"nodeType":"Identifier","messageId":"undef","endLine":3,"endColumn":22},{"ruleId":"no-undef","severity":2,"message":"'getBrowser' is not defined.","line":11,"column":9,"nodeType":"Identifier","messageId":"undef","endLine":11,"endColumn":19},{"ruleId":"no-undef","severity":2,"message":"'SaveUserDetails' is not defined.","line":64,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":64,"endColumn":28}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\r\n$(document).ready(()=>{\r\n    resetLocalStorage();\r\n\r\n    $(\"form\").on(\"submit\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        submitLogin();\r\n    });\r\n\r\n    if (getBrowser() === \"chrome\") {\r\n        loginAjax(\"nunesd\", \"123456\", (success)=>{\r\n            if (!success) {\r\n                showHideModalErrorMessage(true, \"Username/password incorrecto.\");\r\n                return;\r\n            }\r\n            location.href = \"/home.html\";\r\n        });\r\n    }\r\n    else\r\n    {\r\n        loginAjax(\"renatoreis\", \"123456\", (success)=>{\r\n            if (!success) {\r\n                showHideModalErrorMessage(true, \"Username/password incorrecto.\");\r\n                return;\r\n            }\r\n            location.href = \"/home.html\";\r\n        });\r\n    }\r\n});\r\n\r\nfunction submitLogin() {\r\n    showHideModalErrorMessage(false);\r\n\r\n    let login = $(\"#login\").val();\r\n    let password = $(\"#password\").val();\r\n\r\n    if (login === \"\") {\r\n        showHideModalErrorMessage(true, \"Username ou email obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (password === \"\") {\r\n        showHideModalErrorMessage(true, \"Password obrigatória.\");\r\n        return;\r\n    }\r\n\r\n    loginAjax(login, password, (success)=>{\r\n        if (!success) {\r\n            showHideModalErrorMessage(true, \"Username/password incorrecto.\");\r\n            return;\r\n        }\r\n        location.href = \"/home.html\";\r\n    });\r\n}\r\n\r\nfunction loginAjax(login, password, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"POST\", \"/api/login\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            SaveUserDetails(xhr.response);\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify({login: login, password: password}));\r\n}\r\n\r\n\r\n//============================================= HELPER FUNCTIONS\r\nfunction showHideModalErrorMessage(show, message) { \r\n    let errorMessage = $(\"#formFooter\");\r\n\r\n    if (show) {\r\n        errorMessage.text(message);\r\n        errorMessage.show();\r\n    }\r\n    else\r\n    {\r\n        errorMessage.text(\"\");\r\n        errorMessage.hide();\r\n    }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\thiag\\OneDrive\\Documentos\\QS - Lab\\qs_proj_2\\www\\scripts\\users.js","messages":[{"ruleId":"no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":100,"column":62,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":63,"suggestions":[{"messageId":"removeVar","data":{"varName":"_"},"fix":{"range":[3148,3151],"text":""},"desc":"Remove unused variable '_'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'__' is defined but never used.","line":100,"column":65,"nodeType":"Identifier","messageId":"unusedVar","endLine":100,"endColumn":67,"suggestions":[{"messageId":"removeVar","data":{"varName":"__"},"fix":{"range":[3151,3155],"text":""},"desc":"Remove unused variable '__'."}]},{"ruleId":"no-undef","severity":2,"message":"'userDetails' is not defined.","line":102,"column":29,"nodeType":"Identifier","messageId":"undef","endLine":102,"endColumn":40},{"ruleId":"no-undef","severity":2,"message":"'User' is not defined.","line":203,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":203,"endColumn":26},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":247,"column":47,"nodeType":"Identifier","messageId":"unusedVar","endLine":247,"endColumn":48,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[7954,7955],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":265,"column":54,"nodeType":"Identifier","messageId":"unusedVar","endLine":265,"endColumn":55,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[8604,8605],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":275,"column":58,"nodeType":"Identifier","messageId":"unusedVar","endLine":275,"endColumn":59,"suggestions":[{"messageId":"removeVar","data":{"varName":"e"},"fix":{"range":[8892,8893],"text":""},"desc":"Remove unused variable 'e'."}]},{"ruleId":"no-undef","severity":2,"message":"'User' is not defined.","line":319,"column":22,"nodeType":"Identifier","messageId":"undef","endLine":319,"endColumn":26},{"ruleId":"no-undef","severity":2,"message":"'saveUsersLocalStorage' is not defined.","line":364,"column":13,"nodeType":"Identifier","messageId":"undef","endLine":364,"endColumn":34},{"ruleId":"no-undef","severity":2,"message":"'getUsersLocalStorage' is not defined.","line":371,"column":27,"nodeType":"Identifier","messageId":"undef","endLine":371,"endColumn":47}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use strict\";\r\n\r\nvar usersArray = [];\r\nvar usersTable = null;\r\nvar pageSettings;\r\n\r\n$(document).ready(()=> {\r\n    $(\"#buttonNewUserOpenModel\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        createNewUserModal();\r\n    });\r\n\r\n    $(\"#buttonNewUserSave\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        createNewUserModalVerification();\r\n    });\r\n\r\n    $(\"#buttonEditUserDelete\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkUserModalToDelete();\r\n    });\r\n\r\n    $(\"#buttonDeleteUserCancel\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkUserModalToDeleteButton(false);\r\n    });\r\n\r\n    $(\"#buttonDeleteUserConfirm\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkUserModalToDeleteButton(true);\r\n    });\r\n\r\n    $(\"#buttonEditUserSave\").on(\"click\", function(event){\r\n        event.stopPropagation();\r\n        event.preventDefault();\r\n        checkUserModalToSave();\r\n    });\r\n\r\n    $(document).on(\"click\", \"#usersTable tbody tr td:last-child i\", function(e){\r\n        e.preventDefault();\r\n        e.stopPropagation();\r\n        const userId = parseInt($(this).attr(\"data-userId\"));\r\n        openUserModalToEdit(userId); \r\n    });\r\n\r\n    loadAllUsers();\r\n    loadPageSettings();\r\n});\r\n\r\n\r\nfunction loadAllUsers() {\r\n    let table = $(\"#usersTable\"); \r\n\r\n    getUsersAjax((users)=>{\r\n        usersArray = users;\r\n\r\n        if (usersTable) {\r\n            usersArray = users;\r\n            usersTable.clear().draw();\r\n            usersTable.rows.add(usersArray); \r\n            usersTable.columns.adjust().draw(); \r\n            return;\r\n        }\r\n\r\n        usersTable = table.DataTable({\r\n            data: users,\r\n            language: {\r\n                lengthMenu: \"Mostrar _MENU_ utilizadores\",\r\n                search: `Procurar: <i class=\"fas fa-search\"></i>`,\r\n                info: \"Página _START_ de _END_\",\r\n                paginate: {\r\n                    'previous': '<span class=\"prev-icon\">Anterior</span>',\r\n                    'next': '<span class=\"next-icon\">Seguinte</span>'\r\n                }\r\n            },\r\n            searching: true,\r\n\t\t    info: true,\r\n            paging: true,\r\n            order: [],\r\n            fnRowCallback: function(row) {\r\n                $(row).attr(\"scope\", \"row\");     \r\n            },\r\n            lengthMenu: [[10, 25, 50, -1], [10, 25, 50, \"All\"]],\r\n            columnDefs: [\r\n                { targets: 4, width: \"70px\", className: \"text-center\" },\r\n                { targets: 5, className: \"text-center tableJobTdIcon\", width: \"20px\" },\r\n                { orderable: false, targets: [2, 3, 4, 5] }\r\n            ],\r\n            columns: [\r\n                { data: 'name' },\r\n                { data: 'userName' },\r\n                { data: 'email' },\r\n                { data: 'roleDescription' },\r\n                { data: 'TOTAL_JOBS' },\r\n                { data: null, render : function (data, type, _, __) {\r\n                    if (type === \"display\") {\r\n                        if (userDetails.id === data.id) {\r\n                            return \"\";\r\n                        }\r\n                        \r\n                        return `<i class=\"fas fa-edit table-users-icon-edit\" data-userId=\"${data.id}\"></i>`;\r\n                    } \r\n                    else \r\n                    {\r\n                        return data;\r\n                    }\r\n                  }\r\n                }\r\n            ]\r\n        });\r\n    });\r\n}\r\n\r\nfunction loadPageSettings(){    \r\n    loadPageSettingsAjax((settings)=>{\r\n        pageSettings = settings;\r\n        //console.log(pageSettings);\r\n        let inpEditUserType = $(\"#inpEditUserType\");\r\n        let inpUserType = $(\"#inpUserType\");\r\n\r\n        pageSettings[0].forEach((code)=>{\r\n            inpEditUserType.append(`<option value='${code.code}'>${code.description}</option>`);\r\n            inpUserType.append(`<option value='${code.code}'>${code.description}</option>`);\r\n        });\r\n    });\r\n}\r\n\r\nfunction createNewUserModal(){\r\n    let modal = $(\"#modalCreateUser\");\r\n    modal.find(\"#inpCreateName\").val(\"\");\r\n    modal.find(\"#inpCreateUserName\").val(\"\");\r\n    modal.find(\"#inpCreateEmail\").val(\"\");\r\n    modal.find(\"#inpUserType\").val(\"\");\r\n    modal.find(\"#inpPassword\").val(\"\");\r\n    modal.find(\"#inpConfirmPassword\").val(\"\");\r\n    showHideModalErrorMessage(modal, false);\r\n    modal.modal(\"show\");\r\n}\r\n\r\nfunction createNewUserModalVerification(){\r\n    let modal = $(\"#modalCreateUser\");\r\n\r\n    let name = modal.find(\"#inpCreateName\").val();\r\n    let userName = modal.find(\"#inpCreateUserName\").val();\r\n    let email = modal.find(\"#inpCreateEmail\").val();\r\n    let role = modal.find(\"#inpUserType\").val();\r\n    let password = modal.find(\"#inpPassword\").val();\r\n    let confirmPassword = modal.find(\"#inpConfirmPassword\").val();\r\n\r\n    showHideModalErrorMessage(modal, false);\r\n\r\n    if (name === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O nome é obrigatório.\");\r\n        return;\r\n    }\r\n    if (userName === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O nome de utilizador é obrigatório.\");\r\n        return;\r\n    }\r\n    if (email === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O email é obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (!email.includes(\"@\")) {\r\n        showHideModalErrorMessage(modal, true, \"O email não é valido.\");\r\n        return;\r\n    }\r\n\r\n    if (usersArray.filter((u)=>{ return u.userName.replace(\" \", \"\").toUpperCase() === userName.replace(\" \", \"\").toUpperCase(); }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Este utilizador já existe\");\r\n        return;\r\n    }\r\n\r\n    if (usersArray.filter((u)=>{ return u.email.replace(\" \", \"\").toUpperCase() === email.replace(\" \", \"\").toUpperCase(); }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Um utilizador com este email já existe\");\r\n        return;\r\n    }\r\n\r\n    if (role === null) {\r\n        showHideModalErrorMessage(modal, true, \"Seleccione o tipo de utilizador.\");\r\n        return;\r\n    }\r\n\r\n    if (password === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"Introduza password.\");\r\n        return;\r\n    }\r\n    if (confirmPassword === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"Confirme password.\");\r\n        return;\r\n    }\r\n    if(!(password === confirmPassword)) {\r\n        showHideModalErrorMessage(modal, true, \"As passwords não correspondem.\");\r\n        return;\r\n    }\r\n\r\n    const user = new User(\r\n        null, \r\n        userName, \r\n        name, \r\n        email, \r\n        role,\r\n        confirmPassword\r\n    );\r\n\r\n    createUserAjax(user, (success)=>{\r\n        if (!success) {\r\n            showHideModalErrorMessage(modal, true, \"Algo correu mal. Tente outravez.\");\r\n            return;\r\n        }\r\n        loadAllUsers();\r\n        modal.modal(\"hide\");\r\n    });\r\n}\r\n\r\nfunction openUserModalToEdit(userId){    \r\n    const user = usersArray.filter((u)=>{ return u.id === userId; })[0];\r\n    //console.log(user);\r\n    let modal = $(\"#modalEditUser\");\r\n    modal.attr(\"data-id\", userId);\r\n\r\n    modal.find(\"#inpEditName\").val(\"\");\r\n    modal.find(\"#inpEditUserName\").val(\"\");\r\n    modal.find(\"#inpEditEmail\").val(\"\");\r\n    modal.find(\"#inpEditUserType\").val(\"\");\r\n\r\n    modal.find(\"#inpEditName\").val(user.name);\r\n    modal.find(\"#inpEditUserName\").val(user.userName);\r\n    modal.find(\"#inpEditEmail\").val(user.email);\r\n    modal.find(`#inpEditUserType option[value='${user.roleCode}']`).prop('selected', true);\r\n\r\n    showHideModalErrorMessage(modal, false);\r\n\r\n    modal.modal(\"show\");\r\n}\r\n\r\nfunction checkUserModalToDelete(){\r\n    let modalEdit = $(\"#modalEditUser\");    \r\n    const userId = parseInt(modalEdit.attr(\"data-id\"));\r\n\r\n    modalEdit.on('hidden.bs.modal', function (e) {\r\n        $(this).off('hidden.bs.modal');\r\n        let modalMessage = $(\"#modalMessage\");\r\n        modalMessage.find(\".modal-body p\").text(\"Tem a certeza que quer remover este utilizador?\");\r\n        modalMessage.attr(\"data-id\", userId);\r\n        modalMessage.modal(\"show\");\r\n    });\r\n    modalEdit.modal(\"hide\");\r\n}\r\n\r\nfunction checkUserModalToDeleteButton(toDelete){\r\n    let modalMessage = $(\"#modalMessage\");\r\n    let modalEdit = $(\"#modalEditUser\"); \r\n    const userId = parseInt(modalMessage.attr(\"data-id\"));\r\n\r\n    showHideModalErrorMessage(modalEdit, false);\r\n\r\n    if (!toDelete) {\r\n        modalMessage.on('hidden.bs.modal', function (e) {\r\n            $(this).off('hidden.bs.modal');\r\n            modalEdit.modal(\"show\");\r\n        });\r\n        modalMessage.modal(\"hide\");\r\n        return;\r\n    }\r\n\r\n    deleteUserAjax(userId, (success)=>{\r\n        if (!success) {\r\n            modalMessage.on('hidden.bs.modal', function (e) {\r\n                $(this).off('hidden.bs.modal');\r\n                showHideModalErrorMessage(modalEdit, true, \"Algo correu mal. Tente outravez.\");\r\n                modalEdit.modal(\"show\");\r\n            });\r\n            modalMessage.modal(\"hide\");\r\n            return;\r\n        }\r\n\r\n        loadAllUsers();\r\n        modalMessage.modal(\"hide\");\r\n    });\r\n}\r\n\r\nfunction checkUserModalToSave() {\r\n    let modal = $(\"#modalEditUser\");    \r\n    const userId = parseInt(modal.attr(\"data-id\"));\r\n\r\n    showHideModalErrorMessage(modal, false);\r\n\r\n    let name = modal.find(\"#inpEditName\").val();\r\n    let userName = modal.find(\"#inpEditUserName\").val();\r\n    let email = modal.find(\"#inpEditEmail\").val();\r\n    let role = modal.find(\"#inpEditUserType\").val();\r\n\r\n   \r\n    if (name === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O nome é obrigatório.\");\r\n        return;\r\n    }\r\n    if (email === \"\") {\r\n        showHideModalErrorMessage(modal, true, \"O email é obrigatório.\");\r\n        return;\r\n    }\r\n\r\n    if (!email.includes(\"@\")) {\r\n        showHideModalErrorMessage(modal, true, \"O email não é valido.\");\r\n        return;\r\n    }\r\n    if (usersArray.filter((u)=>{ return u.email.replace(\" \", \"\").toUpperCase() === email.replace(\" \", \"\").toUpperCase() && u.id !== userId; }).length) {\r\n        showHideModalErrorMessage(modal, true, \"Um utilizador com este email já existe\");\r\n        return;\r\n    }\r\n\r\n    const user = new User(\r\n        userId, \r\n        userName, \r\n        name, \r\n        email, \r\n        role,\r\n        null\r\n    );\r\n\r\n    editUserAjax(user, (status) => {\r\n        if (!status) {\r\n            showHideModalErrorMessage(modal, true, \"Algo correu mal. Tente outravez.\");\r\n            return;\r\n        }\r\n        loadAllUsers();\r\n\r\n        modal.modal(\"hide\");\r\n    });\r\n}\r\n\r\n\r\n//============================================= HELPER FUNCTIONS\r\nfunction showHideModalErrorMessage(modal, show, message) { \r\n    let errorMessage = modal.find(\".errorDivMessage\");\r\n\r\n    if (show) {\r\n        errorMessage.text(message);\r\n        errorMessage.show();\r\n    }\r\n    else\r\n    {\r\n        errorMessage.text(\"\");\r\n        errorMessage.hide();\r\n    }\r\n}\r\n\r\n\r\n//============================================= AJAX CALLS\r\nfunction getUsersAjax(callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"GET\", \"/api/getUsers\", true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            const { users } = xhr.response;\r\n            saveUsersLocalStorage(users);\r\n            callback(users);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n\r\n            const users = getUsersLocalStorage();\r\n            callback(users);\r\n        }\r\n    };\r\n    xhr.send();\r\n}\r\n\r\nfunction createUserAjax(user, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"POST\", \"/api/createUser\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(user));\r\n}\r\n\r\nfunction deleteUserAjax(id, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"DELETE\", `/api/deleteUser/${id}`, true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(true);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send();\r\n}\r\n\r\nfunction editUserAjax(user, callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";    \r\n    xhr.open(\"PUT\", \"/api/editUser\", true);\r\n    xhr.setRequestHeader('Content-Type', 'application/json');\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(xhr.response.success);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback(false);\r\n        }\r\n    };\r\n    xhr.send(JSON.stringify(user));\r\n}\r\n\r\nfunction loadPageSettingsAjax(callback){\r\n    let xhr = new XMLHttpRequest();\r\n    xhr.responseType=\"json\";\r\n    xhr.open(\"GET\", \"/api/getPageSettings\", true);\r\n    xhr.onreadystatechange = function () {\r\n        if (this.readyState === 4 && this.status === 200) {\r\n            callback(xhr.response.pageSettings);\r\n        }\r\n        else if (this.readyState === 4) {\r\n            console.log(this.status);\r\n            console.log(this.statusText);\r\n            callback([]);\r\n        }\r\n    };\r\n    xhr.send();\r\n}","usedDeprecatedRules":[]}]